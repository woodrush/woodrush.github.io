<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://woodrush.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://woodrush.github.io/blog/" rel="alternate" type="text/html" /><updated>2022-01-17T12:50:05+09:00</updated><id>https://woodrush.github.io/blog/feed.xml</id><title type="html">Woodrush’s Blog</title><subtitle>A blog written by Hikaru Ikuta.</subtitle><entry><title type="html">Building a Neural Network in Pure Lisp Without Built-In Numbers Using Only Atoms and Lists</title><link href="https://woodrush.github.io/blog/posts/2022-01-16-neural-networks-in-pure-lisp.html" rel="alternate" type="text/html" title="Building a Neural Network in Pure Lisp Without Built-In Numbers Using Only Atoms and Lists" /><published>2022-01-16T19:00:35+09:00</published><updated>2022-01-16T19:00:35+09:00</updated><id>https://woodrush.github.io/blog/posts/neural-networks-in-pure-lisp</id><content type="html" xml:base="https://woodrush.github.io/blog/posts/2022-01-16-neural-networks-in-pure-lisp.html"><![CDATA[<p><a href="/blog/assets/posts/2022-01-16/nn-diagram-bg.svg"><img src="/blog/assets/posts/2022-01-16/nn-diagram.svg" alt="A diagram of our neural network." /></a></p>

<p>At the dawn of Lisp after its birth in 1958, Lisp was used as a language for creating advanced artificial intelligence.
This project makes that a reality once again by implementing a neural network for pattern recognition
written in pure lisp without built-in integers or floating-point numbers, that runs on the IBM PC model 5150.</p>

<h2 id="building-neural-networks-only-using-symbolic-manipulation">Building Neural Networks only using Symbolic Manipulation</h2>
<p><a href="https://justine.lol/sectorlisp2/">SectorLISP</a> is an amazing project
where a fully functional Lisp interpreter is fit into the 512 bytes of the boot sector of a floppy disk.
Since it works as a boot sector program, the binary can be written to a disk to be used as a boot drive,
where the computer presents an interface for writing and evaluating Lisp programs,
all running in the booting phase of bare metal on the 436-byte program.
I have written another blog post on SectorLISP about
<a href="/blog/posts/2022-01-12-sectorlisp-io.html">extending SectorLISP to implement BASIC REPLs and games</a>.</p>

<p>SectorLISP is implemented as a pure Lisp. In pure Lisp, there are <em>no</em> built-in types for integers or floating-point numbers,
and only supports atoms and lists as available data structures.
Surprisingly, even with the lack of numbers, such a Lisp is Turing-complete,
meaning that it is basically capable of any calculation that can be done on modern computers.</p>

<p>In this project, we implement a neural network that runs on SectorLISP.
Since there are no features of built-in numbers, we have to reinvent the notion of numbers from scratch only by using symbolic manipulation.
We first start off by constructing a fixed-point number calculation system based solely on list manipulations,
and finally, implement matrix multiplication and activation functions using this fixed-point number system.</p>

<p>Since SectorLISP runs on the IBM PC model 5150,
this implementation allows neural networks to run on the booting phase of vintage PCs.</p>

<h2 id="running-the-neural-network-on-your-computer">Running the Neural Network on Your Computer</h2>
<p>The source code for the SectorLISP neural network, as well as the training and testing scripts
used to obtain the model parameters, are available at my GitHub repository:</p>

<p><a href="https://github.com/woodrush/sectorlisp-nn">https://github.com/woodrush/sectorlisp-nn</a></p>

<p>Here I will describe the instructions for running the SectorLISP program
to calculate predictions for custom digit images in detail.
The instructions for training and evaluating the neural network
to obtain the model parameters used for this network is available at the repository.</p>

<h3 id="running-the-sectorlisp-program">Running the SectorLISP Program</h3>
<p>Here are the instructions for running the neural network implemented in SectorLISP.</p>

<p>First, <code class="language-html highlighter-rouge">git clone</code> the SectorLISP repository and <code class="language-html highlighter-rouge">make</code> SectorLISP’s binary, <code class="language-html highlighter-rouge">sectorlisp.bin</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>git clone https://github.com/jart/sectorlisp
<span class="nb">cd </span>sectorlisp
make
</code></pre></div></div>

<p>This will generate <code class="language-html highlighter-rouge">sectorlisp.bin</code> under <code class="language-html highlighter-rouge">./sectorlisp</code>.</p>

<p>By building a <a href="https://woodrush.github.io/blog/posts/2022-01-12-sectorlisp-io.html">fork</a>
of SectorLISP that supports I/O, an additional output with some messages indicating the input and the output will become printed.
In this case, <code class="language-html highlighter-rouge">git checkout</code> to the <code class="language-html highlighter-rouge">io</code> branch by running <code class="language-html highlighter-rouge">git checkout io</code> before running <code class="language-html highlighter-rouge">make</code>.
Since the source code for this project is backwards comptible with the main SectorLISP branch,
the same code can be run on both versions.</p>

<p>To run SectorLISP on the i8086 emulator <a href="https://justine.lol/blinkenlights/">Blinkenlights</a>,
first follow the instructions on its <a href="https://justine.lol/blinkenlights/download.html">download page</a>
and get the latest version:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>curl https://justine.lol/blinkenlights/blinkenlights-latest.com <span class="o">&gt;</span>blinkenlights.com
<span class="nb">chmod</span> +x blinkenlights.com
</code></pre></div></div>

<p>You can then run SectorLISP by running:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>./blinkenlights.com <span class="nt">-rt</span> sectorlisp.bin
</code></pre></div></div>

<p>In some cases in Ubuntu, there might be a graphics-related error showing and the emulator may not start.
In that case, run the following command first available on the download page:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s2">"echo ':APE:M::MZqFpD::/bin/sh:' &gt;/proc/sys/fs/binfmt_misc/register"</span>
</code></pre></div></div>

<p>Running this command should allow you to run Blinkenlights on your terminal.
Instructions for running Blinkenlights on other operating systems is described in the <a href="https://justine.lol/blinkenlights/download.html">Blinkenlights download page</a>.</p>

<p>After starting Blinkenlights,
expand the size of your terminal large enough so that the <code class="language-html highlighter-rouge">TELETYPEWRITER</code> region shows up
at the center of the screen.
This region is the console used for input and output.
Then, press <code class="language-html highlighter-rouge">c</code> to run the emulator in continuous mode.
The cursor in the <code class="language-html highlighter-rouge">TELETYPEWRITER</code> region should move one line down.
You can then start typing in text or paste a long code from your terminal into Blinkenlight’s console
to run your Lisp program.</p>

<p>To run the neural network program, copy the contents of <a href="https://github.com/woodrush/sectorlisp-nn/blob/main/nn.lisp">nn.lisp</a>
from the repository to your clipboard, and paste it inside the terminal into Blinkenlight’s console.
After waiting for a few minutes, the result will be shown on the console.</p>

<p>To input a custom 3x5 digit image,
edit <a href="https://github.com/woodrush/sectorlisp-nn/blob/main/nn.lisp#L307-L314">the following expression</a> at the end of the program:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="p">(</span><span class="k">QUOTE</span>
   <span class="c1">;; input</span>
 <span class="p">)</span>
 <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span>
         <span class="nv">*</span> <span class="nv">.</span> <span class="nv">.</span>
         <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span>
         <span class="nv">.</span> <span class="nv">.</span> <span class="nv">*</span>
         <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="running-on-physical-hardware">Running on Physical Hardware</h3>
<p>You can also run SectorLISP on an actual physical machine if you have a PC with an Intel CPU that boots with a BIOS,
and a drive such as a USB drive or a floppy disk that can be used as a boot drive.
First, mount your drive to the PC you’ve built sectorlisp.bin on, and check:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>lsblk <span class="nt">-o</span> KNAME,TYPE,SIZE,MODEL
</code></pre></div></div>

<p>Among the list of the hardware, check for the device name for your drive you want to write SectorLISP onto.
After making sure of the device name, run the following command, replacing <code class="language-html highlighter-rouge">[devicename]</code> with your device name.
<code class="language-html highlighter-rouge">[devicename]</code> should be values such as <code class="language-html highlighter-rouge">sda</code> or <code class="language-html highlighter-rouge">sdb</code>, depending on your setup.</p>

<p><strong>Caution:</strong> The following command used for writing to the drive
will overwrite anything that exists in the target drive’s boot sector,
so it’s important to make sure which drive you’re writing into.
If the command or the device name is wrong,
it may overwrite the entire content of your drive or other drives mounted in your PC,
probably causing your computer to be unbootable
(or change your PC to a SectorLISP machine that always boots SectorLISP,
which is cool, but is hard to recover from).
Please perform these steps with extra care, and at your own risk.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>sectorlisp.bin <span class="nv">of</span><span class="o">=</span>/dev/[devicename] <span class="nv">bs</span><span class="o">=</span>512 <span class="nv">count</span><span class="o">=</span>1
</code></pre></div></div>

<p>After you have written your boot drive, insert the drive to the PC you want to boot it from.
You may have to change the boot priority settings from the BIOS to make sure the PC boots from the target drive.
When the drive boots successfully, you should see a cursor blinking in a blank screen,
which indicates that you’re ready to type your Lisp code into bare metal.</p>

<p>We will now discuss the implementation details of this project.</p>

<h2 id="training-the-neural-network">Training the Neural Network</h2>
<p>We first start off by training a neural network on a modern computer using TensorFlow to get its model parameters.
The parameters are then converted to 18-bit fixed-point numbers when loading to the SectorLISP program.</p>

<h3 id="the-dataset">The Dataset</h3>
<p><strong>Training Dataset</strong></p>

<p><a href="/blog/assets/posts/2022-01-16/train_0_0.png"><img src="/blog/assets/posts/2022-01-16/train_0_0.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_1_1.png"><img src="/blog/assets/posts/2022-01-16/train_1_1.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_2_2.png"><img src="/blog/assets/posts/2022-01-16/train_2_2.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_3_3.png"><img src="/blog/assets/posts/2022-01-16/train_3_3.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_4_4.png"><img src="/blog/assets/posts/2022-01-16/train_4_4.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_5_5.png"><img src="/blog/assets/posts/2022-01-16/train_5_5.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_6_6.png"><img src="/blog/assets/posts/2022-01-16/train_6_6.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_7_7.png"><img src="/blog/assets/posts/2022-01-16/train_7_7.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_8_8.png"><img src="/blog/assets/posts/2022-01-16/train_8_8.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_9_9.png"><img src="/blog/assets/posts/2022-01-16/train_9_9.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_1_10.png"><img src="/blog/assets/posts/2022-01-16/train_1_10.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_1_11.png"><img src="/blog/assets/posts/2022-01-16/train_1_11.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_4_12.png"><img src="/blog/assets/posts/2022-01-16/train_4_12.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_7_13.png"><img src="/blog/assets/posts/2022-01-16/train_7_13.png" alt="Training images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/train_7_14.png"><img src="/blog/assets/posts/2022-01-16/train_7_14.png" alt="Training images from the dataset." /></a></p>

<p><strong>Test Dataset</strong></p>

<p><a href="/blog/assets/posts/2022-01-16/test_0_0.png"><img src="/blog/assets/posts/2022-01-16/test_0_0.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_0_1.png"><img src="/blog/assets/posts/2022-01-16/test_0_1.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_1_2.png"><img src="/blog/assets/posts/2022-01-16/test_1_2.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_1_3.png"><img src="/blog/assets/posts/2022-01-16/test_1_3.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_2_4.png"><img src="/blog/assets/posts/2022-01-16/test_2_4.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_2_5.png"><img src="/blog/assets/posts/2022-01-16/test_2_5.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_3_6.png"><img src="/blog/assets/posts/2022-01-16/test_3_6.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_3_7.png"><img src="/blog/assets/posts/2022-01-16/test_3_7.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_4_8.png"><img src="/blog/assets/posts/2022-01-16/test_4_8.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_4_9.png"><img src="/blog/assets/posts/2022-01-16/test_4_9.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_5_10.png"><img src="/blog/assets/posts/2022-01-16/test_5_10.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_5_11.png"><img src="/blog/assets/posts/2022-01-16/test_5_11.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_6_12.png"><img src="/blog/assets/posts/2022-01-16/test_6_12.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_6_13.png"><img src="/blog/assets/posts/2022-01-16/test_6_13.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_7_14.png"><img src="/blog/assets/posts/2022-01-16/test_7_14.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_7_15.png"><img src="/blog/assets/posts/2022-01-16/test_7_15.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_8_16.png"><img src="/blog/assets/posts/2022-01-16/test_8_16.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_8_17.png"><img src="/blog/assets/posts/2022-01-16/test_8_17.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_9_18.png"><img src="/blog/assets/posts/2022-01-16/test_9_18.png" alt="Testing images from the dataset." /></a>
<a href="/blog/assets/posts/2022-01-16/test_9_19.png"><img src="/blog/assets/posts/2022-01-16/test_9_19.png" alt="Testing images from the dataset." /></a></p>

<p>The entire dataset for training and testing this neural network is shown above.
The input images are 3x5-sized binary monochrome images,
which are converted to fixed-point vectors when being provided to the network.</p>

<p>The dataset, as well as the fully connected neural network model, were inspired by
a <a href="https://aidiary.hatenablog.com/entry/20050505/1274165051">blog post</a> (in Japanese)
about pattern recognition using neural networks, written by Koichiro Mori (<a href="https://profile.hatena.ne.jp/aidiary/">aidiary</a>).</p>

<p>The upper half is the training dataset that is used to train the neural network.
The bottom half is the testing dataset, which is not shown at all to the network at training time,
and will be shown for the first time when evaluating the neural network’s performance,
to check if the digits for these newly shown images are predicted correctly.</p>

<p>In the final Lisp program, the input image is provided as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; input</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span>
        <span class="nv">*</span> <span class="nv">.</span> <span class="nv">.</span>
        <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span>
        <span class="nv">.</span> <span class="nv">.</span> <span class="nv">*</span>
        <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="the-model">The Model</h3>
<p>The model for our neural network is very simple.
It is a two-layered fully connected network with a ReLU activation function:</p>

<p><a href="/blog/assets/posts/2022-01-16/nn-diagram.svg"><img src="/blog/assets/posts/2022-01-16/nn-diagram.svg" alt="A diagram of our neural network." /></a></p>

<p>In TensorFlow, it is written like this:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="n">model</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="n">Sequential</span><span class="p">([</span>
  <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Flatten</span><span class="p">(</span><span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">)),</span>
  <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="s">"relu"</span><span class="p">),</span>
  <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dropout</span><span class="p">(</span><span class="mf">0.2</span><span class="p">),</span>
  <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="n">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span>
<span class="p">])</span>
</code></pre></div></div>

<p>The model and its implementation were referenced from the <a href="https://www.tensorflow.org/tutorials/quickstart/beginner">TensorFlow 2 quickstart for beginners</a>
entry from the TensorFlow documentation.
As mentioned before, the fully-connected model was also inspired by
a <a href="https://aidiary.hatenablog.com/entry/20050505/1274165051">blog post</a> (in Japanese)
written by Koichiro Mori (<a href="https://profile.hatena.ne.jp/aidiary/">aidiary</a>).</p>

<p>This model takes a 3x5 image and outputs a 1x10 vector,
where each element represents the log-confidence of each digit from 0 to 9.
The final prediction result of the neural network is defined by observing the index that has the largest value in the output 1x10 vector.</p>

<p>Each fully connected neural network contains two trainable tensors <code class="language-html highlighter-rouge">A</code> and <code class="language-html highlighter-rouge">B</code>, which are the coefficient matrix and the bias vectors, respectively.
This network thus consists of 4 model parameter tensors, <code class="language-html highlighter-rouge">A_1</code>, <code class="language-html highlighter-rouge">B_1</code>, <code class="language-html highlighter-rouge">A_2</code>, and <code class="language-html highlighter-rouge">B_2</code>,
each of size 15x10, 10x1, 10x10, and 10x1, respectively.</p>

<p>The Dropout function is included for inducing generalization and is only activated at training time.</p>

<p>We use the categorical cross-entropy loss and the Adam optimizer for training:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="n">model</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="s">"adam"</span><span class="p">,</span>
             <span class="n">loss</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">losses</span><span class="p">.</span><span class="n">SparseCategoricalCrossentropy</span><span class="p">(</span><span class="n">from_logits</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
             <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="s">"accuracy"</span><span class="p">])</span>
</code></pre></div></div>

<p>The model is then trained for 1000 epochs:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">data_x</span><span class="p">,</span> <span class="n">data_y_category</span><span class="p">,</span> <span class="n">epochs</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>After training, the model parameters are saved:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="n">model</span><span class="p">.</span><span class="n">save</span><span class="p">(</span><span class="s">"params.h5"</span><span class="p">)</span>
</code></pre></div></div>

<p>The model parameters <code class="language-html highlighter-rouge">A_1</code>, <code class="language-html highlighter-rouge">B_1</code>, <code class="language-html highlighter-rouge">A_2</code>, and <code class="language-html highlighter-rouge">B_2</code> are contained in this file.
Since each model parameter has the sizes 15x10, 10x1, 10x10, and 10x1,
the total number of fixed-point numbers is 1620.
Since we are using 18 bits for each fixed-point number,
the total number of bits for the model parameters of the entire neural network is 29160 bits.</p>

<p>Note that although fixed-point numbers are used in the final Lisp implementation,
the training process uses 64-bit floating-point numbers.
Since the number of layers and the matrix sizes were both small enough for truncating the precision,
we were able to directly convert the trained floating-point model parameter values
to fixed-point numbers when loading them into the Lisp implementation.</p>

<h3 id="testing-for-noise-resistance">Testing for Noise Resistance</h3>
<p>The training accuracy was 100%, meaning that all of the 15 images in the training dataset
are correctly predicted to the true digit.</p>

<p>The testing accuracy was 85%, meaning that 17 out of 20 newly seen images
that were <em>not</em> shown at all during training were predicted correctly.</p>

<p>Here is the confusion matrix for the test dataset:</p>

<p><a href="/blog/assets/posts/2022-01-16/confusion_matrix.png"><img src="/blog/assets/posts/2022-01-16/confusion_matrix.png" alt="The confusion matrix for the test dataset." /></a></p>

<p>In the case for a 100% accuracy performance, the matrix becomes completely diagonal,
meaning that the prediction results always match the ground truth labels.
The three off-diagonal elements indicate the 3 prediction errors that occurred at test time.</p>

<p>Here are the 3 images that were not predicted correctly:</p>

<table>
<thead>
  <th>Test Dataset Image</th>
  <th>Prediction</th>
</thead>
<tr>
  <td>
    <a href="/blog/assets/posts/2022-01-16/test_2_5.png"><img src="/blog/assets/posts/2022-01-16/test_2_5.png" alt="Testing images from the dataset." /></a>
  </td>
  <td>1</td>
</tr>
<tr>
  <td>
    <a href="/blog/assets/posts/2022-01-16/test_8_16.png"><img src="/blog/assets/posts/2022-01-16/test_8_16.png" alt="Testing images from the dataset." /></a>
  </td>
  <td>3</td>
</tr>
<tr>
  <td>
    <a href="/blog/assets/posts/2022-01-16/test_9_18.png"><img src="/blog/assets/posts/2022-01-16/test_9_18.png" alt="Testing images from the dataset." /></a>
  </td>
  <td>4</td>
</tr>
</table>

<p>Since all of the other images were predicted correctly, this means that the neural network was able to
correctly predict 85% of the unknown data that was <em>never shown</em> at training time.
This capability of flexible generalization for newly encountered images is a core feature of neural networks.</p>

<h2 id="implementing-neural-networks-in-pure-lisp">Implementing Neural Networks in Pure Lisp</h2>
<blockquote>
  <p>“Lisp has jokingly been called “the most intelligent way to misuse a computer”.
I think that description is a great compliment because it transmits the full flavor of liberation:
it has assisted a number of our most gifted fellow humans in thinking previously impossible thoughts.”
– Edsger W. Dijkstra</p>
</blockquote>

<p>Now that we have obtained the model parameters for our neural network,
it’s time to build it into pure Lisp.</p>

<p>As explained in the <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a>,
SectorLISP does not have a built-in feature for integers or floating-point numbers.
The only data structures that SectorLISP has are lists and atoms,
so we must implement a system for calculating fractional numbers only by manipulating lists of atoms.
Our goal is to implement matrix multiplication in fixed-point numbers.</p>

<p>The fixed-point number system used in this project is also available as a SectorLISP library
at my <a href="https://github.com/woodrush/libsectorlisp">libsectorlisp</a> GitHub repo.</p>

<h3 id="the-number-representations">The Number Representations</h3>
<p>The number system for this project will be 18-bit fixed-point numbers,
with 13 bits for the fractional part, 4 bits for the integer part, and 1 bit for the sign.</p>

<p>Here are some examples of numbers expressed in this fixed-point system:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>    <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">))</span> <span class="c1">;; Zero</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>    <span class="nv">1</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">))</span> <span class="c1">;; One</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">1</span>    <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">))</span> <span class="c1">;; 0.5</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">1</span> <span class="nv">0</span>    <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">))</span> <span class="c1">;; 0.25</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>    <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span><span class="p">))</span> <span class="c1">;; -1</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">1</span>    <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span><span class="p">))</span> <span class="c1">;; -0.5</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">1</span> <span class="nv">1</span>    <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span><span class="p">))</span> <span class="c1">;; -0.25</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">1</span>  <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span>  <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span>  <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span>    <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span> <span class="nv">1</span><span class="p">))</span> <span class="c1">;; Negative epsilon (-2^13)</span>
<span class="c1">;;     |----------------------------|  |------||-|</span>
<span class="c1">;;            Fractional part       Integer part \Sign bit</span>
</code></pre></div></div>

<h3 id="half-adder">Half Adder</h3>
<p>We first start by making a <a href="https://en.wikipedia.org/wiki/Adder_(electronics)#Half_adder">half adder</a>,
which computes single-digit binary addition.
A half adder takes the binary single-digit variables <code class="language-html highlighter-rouge">A</code> and <code class="language-html highlighter-rouge">B</code> and outputs a pair of variables
<code class="language-html highlighter-rouge">S</code> and <code class="language-html highlighter-rouge">C</code>, each representing the sum and the carry flag.
The carry <code class="language-html highlighter-rouge">C</code> occurs when both input numbers are <code class="language-html highlighter-rouge">1</code> needing a carry digit for addition.
Therefore, it can be written as:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; addhalf : Half adder</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nv">X</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">))</span>
     <span class="p">(</span><span class="k">COND</span>
       <span class="p">((</span><span class="k">EQ</span> <span class="nv">Y</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">))</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">)</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">)))</span>
       <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">)</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">)))))</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span>
     <span class="p">(</span><span class="k">CONS</span> <span class="nv">Y</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">))))))</span>
</code></pre></div></div>

<h3 id="full-adder">Full Adder</h3>
<p>Next we make a <a href="https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder">full adder</a>.
A full adder also computes single-digit binary addition, except it takes 3 variables including the carry digit,
<code class="language-html highlighter-rouge">A</code>, <code class="language-html highlighter-rouge">B</code>, and <code class="language-html highlighter-rouge">C</code>, and outputs the pair <code class="language-html highlighter-rouge">S</code> and <code class="language-html highlighter-rouge">C</code> for the sum and the carry flag.
Including <code class="language-html highlighter-rouge">C</code> will help to recursively compute multiple-digit addition in the next section.
This can be written as:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; addfull : Full adder</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span> <span class="nv">C</span><span class="p">)</span>
  <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">HA1</span><span class="p">)</span>
     <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">HA2</span><span class="p">)</span>
        <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">HA2</span><span class="p">)</span>
              <span class="p">(</span><span class="k">COND</span>
                <span class="p">((</span><span class="k">EQ</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">HA1</span><span class="p">))</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">))</span>
                <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">HA2</span><span class="p">)))))</span>
      <span class="p">(</span><span class="nv">addhalf</span> <span class="nv">C</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">HA1</span><span class="p">))))</span>
   <span class="p">(</span><span class="nv">addhalf</span> <span class="nv">X</span> <span class="nv">Y</span><span class="p">))))</span>
</code></pre></div></div>

<h3 id="unsigned-integer-addition">Unsigned Integer Addition</h3>
<p>Now that we have constructed a full adder, we can recursively connect these full adders
to construct a multiple-binary-digit adder.
We first start off by constructing an adder for unsigned integers.</p>

<p>Addition is done by first adding the least significant bits, computing the sum and the carry,
and then adding the next significant bits as well as the carry flag if it exists.
Since the full adder does just this for each digit, we can recursively connect
full adders together to make a multiple-digit adder:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; uaddnofc : Unsigned N-bit add with carry</span>
  <span class="c1">;;            The output binary is in reverse order (the msb is at the end)</span>
  <span class="c1">;;            The same applies to the entire system</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span> <span class="nv">C</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nc">NIL</span> <span class="nv">X</span><span class="p">)</span> <span class="nv">Y</span><span class="p">)</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nc">NIL</span> <span class="nv">Y</span><span class="p">)</span> <span class="nv">X</span><span class="p">)</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span>
     <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">XYC</span><span class="p">)</span>
        <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">XYC</span><span class="p">)</span> <span class="p">(</span><span class="nv">uaddnofc</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">Y</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">XYC</span><span class="p">))))</span>
      <span class="p">(</span><span class="nv">addfull</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">Y</span><span class="p">)</span> <span class="nv">C</span><span class="p">))))))</span>
</code></pre></div></div>

<p>Here, <code class="language-html highlighter-rouge">X</code> and <code class="language-html highlighter-rouge">Y</code> are multiple-digit numbers such as <code class="language-html highlighter-rouge">(QUOTE (0  0 0 0 0  0 0 0 0  0 0 0 0    1 0 0 0 0)) ;; One</code>,
and <code class="language-html highlighter-rouge">C</code> is a single-digit carry flag.</p>

<p>This is where the reverse-ordered binary list format becomes useful.
Since addition is started by adding the least significant bits first,
we can immediately extract this bit just by applying <code class="language-html highlighter-rouge">(CAR X)</code> to the numbers.</p>

<p>The <code class="language-html highlighter-rouge">u</code> stands for unsigned, <code class="language-html highlighter-rouge">addn</code> means the addition of N (arbitrary) digits, <code class="language-html highlighter-rouge">of</code> means that overflow is prevented, <code class="language-html highlighter-rouge">c</code> means that there is a carry flag as an argument.
Since overflow is prevented, this means that the resulting sum may become one digit longer than the original inputs <code class="language-html highlighter-rouge">X</code> and <code class="language-html highlighter-rouge">Y</code>,
instead of overflowing to zero.
This is compensated later in other functions.</p>

<p>Finally, to add two unsigned integers <code class="language-html highlighter-rouge">X</code> and <code class="language-html highlighter-rouge">Y</code>, we wrap <code class="language-html highlighter-rouge">uaddnofc</code> with the carry flag initially set to <code class="language-html highlighter-rouge">0</code>,
for unsigned integer addition:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; uaddnof : Unsigned N-bit add</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">uaddnofc</span> <span class="nv">X</span> <span class="nv">Y</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">))))</span>
</code></pre></div></div>

<h3 id="unsigned-integer-multiplication">Unsigned Integer Multiplication</h3>
<p>Multiplication can be done similarly with addition, except we add multiple digits instead of one in each step.
In multiplication, we recursively shift <code class="language-html highlighter-rouge">X</code> one by one bit and add them up,
when the corresponding digit in <code class="language-html highlighter-rouge">Y</code> is <code class="language-html highlighter-rouge">1</code>.
When the digit in <code class="language-html highlighter-rouge">Y</code> is <code class="language-html highlighter-rouge">0</code>, we add nothing.
Shifting <code class="language-html highlighter-rouge">X</code> to the right has the effect of multiplying the number by 2.
Note that the shifting effect is reversed since the bit order is reversed.</p>

<p>Following this design, unsigned integer multiplication is implemented as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; umultnof : Unsigned N-bit mult</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nc">NIL</span> <span class="nv">Y</span><span class="p">)</span> <span class="nv">u0</span><span class="p">)</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">uaddnof</span> <span class="p">(</span><span class="k">COND</span>
                <span class="p">((</span><span class="k">EQ</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">)</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">Y</span><span class="p">))</span> <span class="nv">u0</span><span class="p">)</span>
                <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nv">X</span><span class="p">))</span>
              <span class="p">(</span><span class="nv">umultnof</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">)</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">Y</span><span class="p">)))))))</span>
</code></pre></div></div>

<h3 id="unsigned-fixed-point-addition">Unsigned Fixed-Point Addition</h3>
<p>Now we are ready to start thinking about fixed-point numbers.
In fact, we have already implemented unsigned fixed-point addition at this point.
This is because of the most significant feature for fixed-point numbers,
where addition and subtraction can be implemented exactly the same as signed integers.</p>

<p>This is because fixed-point numbers can be thought of as signed integers with a
fixed exponent bias <code class="language-html highlighter-rouge">2^N</code>. Since the fraction part for our system is 13, the exponent bias is
<code class="language-html highlighter-rouge">2^(-13)</code> for our system.
Therefore, for two numbers <code class="language-html highlighter-rouge">A_fix</code> and <code class="language-html highlighter-rouge">B_fix</code>, we represent these numbers using an underlying integer <code class="language-html highlighter-rouge">A</code> and <code class="language-html highlighter-rouge">B</code>,
as <code class="language-html highlighter-rouge">A_fix == A * 2^(-13)</code>, <code class="language-html highlighter-rouge">B_fix == B * 2^(-13)</code>.</p>

<p>Now, when calculating <code class="language-html highlighter-rouge">A_fix + B_fix</code>, the exponent <code class="language-html highlighter-rouge">2^(-13)</code> can be factored out,
leaving <code class="language-html highlighter-rouge">(A+B)*2^(-13)</code>. Therefore, we can directly use unsigned integer addition for unsigned fixed-point addition.</p>

<h3 id="unsigned-fixed-point-multiplication">Unsigned Fixed-Point Multiplication</h3>
<p>Multiplication is similar except that the exponent bias changes.
For <code class="language-html highlighter-rouge">A_fix * B_fix</code> in the previous example, the result becomes <code class="language-html highlighter-rouge">(A*B)*2^(-26)</code>, with a smaller exponent bias factor.
Here, we have a gigantic number <code class="language-html highlighter-rouge">A*B</code> compensated with the small exponent bias factor <code class="language-html highlighter-rouge">2^(-26)</code>.
Therefore, to adjust the exponent bias factor, we can divide <code class="language-html highlighter-rouge">A*B</code> by <code class="language-html highlighter-rouge">2^13</code>, and drop the exponent bias factor to <code class="language-html highlighter-rouge">2^(-13)</code>.
In this case, dividing by <code class="language-html highlighter-rouge">2^13</code> means to drop 13 of the least significant bits and to keep the rest.</p>

<p>In the case where the output number still has a bit length longer than <code class="language-html highlighter-rouge">A</code> and <code class="language-html highlighter-rouge">B</code>,
this means that the result overflowed and cannot be captured by the number of bits in our system.
This is the difference between floating-point numbers.
For floating-point numbers, the most significant bit can always be preserved by moving around the decimal point.
In fixed-point numbers, on the other hand, large numbers must have their significant bits discarded since the decimal point is fixed.
Therefore, it is a little odd to drop the significant bits, but this implementation yields the correct results.</p>

<p>Following this design, we can implement unsigned fixed-point multiplication as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; ufixmult : Unsigned fixed-point multiplication</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">take</span> <span class="nv">u0</span> <span class="p">(</span><span class="nv">drop</span> <span class="nv">fracbitsize</span> <span class="p">(</span><span class="nv">umultnof</span> <span class="nv">X</span> <span class="nv">Y</span><span class="p">)))))</span>
<span class="p">(</span><span class="k">QUOTE</span>
</code></pre></div></div>

<p><code class="language-html highlighter-rouge">u0</code> indicates the unsigned integer zero, and <code class="language-html highlighter-rouge">fracbitsize</code> is a list of length 13 indicating the fraction part’s bit size.</p>

<p><code class="language-html highlighter-rouge">take</code> and <code class="language-html highlighter-rouge">drop</code> are defined as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; take : Take a list of (len L) atoms from X</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">L</span> <span class="nv">X</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nc">NIL</span> <span class="nv">L</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">)</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">take</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">L</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)))))))</span>
<span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; drop : Drop the first (len L) atoms from X</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">L</span> <span class="nv">X</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nc">NIL</span> <span class="nv">X</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">)</span>
    <span class="p">((</span><span class="k">EQ</span> <span class="nc">NIL</span> <span class="nv">L</span><span class="p">)</span> <span class="nv">X</span><span class="p">)</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="nv">drop</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">L</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">))))))</span>
</code></pre></div></div>

<h3 id="negation">Negation</h3>
<p>Now we will start taking the signs of the numbers into account.</p>

<p>In our fixed-point number system, negative numbers are expressed by taking the two’s complement of a number.
Negation using two’s complement is best understood as taking the <a href="https://en.wikipedia.org/wiki/Additive_inverse">additive inverse</a> of the number in <code class="language-html highlighter-rouge">mod (2^13)-1</code>.
This yields a very simple implementation for negation:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; negate : Two's complement of int</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">N</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">take</span> <span class="nv">u0</span> <span class="p">(</span><span class="nv">umultnof</span> <span class="nv">N</span> <span class="nv">umax</span><span class="p">))))</span>
</code></pre></div></div>

<p>Here, <code class="language-html highlighter-rouge">umax</code> is a number filled with <code class="language-html highlighter-rouge">1</code>, <code class="language-html highlighter-rouge">(QUOTE (1  1 1 1 1  1 1 1 1  1 1 1 1    1 1 1 1 1))</code>.
When added by the smallest positive number <code class="language-html highlighter-rouge">(QUOTE (1  0 0 0 0  0 0 0 0  0 0 0 0    0 0 0 0 0))</code>,
<code class="language-html highlighter-rouge">umax</code> overflows to <code class="language-html highlighter-rouge">u0</code> which is filled with <code class="language-html highlighter-rouge">0</code>, meaning the number zero.
Since negative numbers are numbers that become zero when added with their absolute value,
<code class="language-html highlighter-rouge">umax</code> represents the negative number with the smallest absolute value in our fixed-point number system.</p>

<p>Similarly, multiplying by <code class="language-html highlighter-rouge">umax</code> yields a number with the same property where the number
exactly overflows to zero with only one bit overflowing at the end.
Since the addition function in fixed-point numbers is defined exactly the same as unsigned integers,
this property means that the output of <code class="language-html highlighter-rouge">negate</code> works as negation in fixed-point numbers as well.
Therefore, this implementation suffices to implement negation in our number system.</p>

<h3 id="signed-fixed-point-subtraction">Signed Fixed-Point Subtraction</h3>
<p>At this point, we can define our final operators for <code class="language-html highlighter-rouge">+</code> and <code class="language-html highlighter-rouge">-</code> used for fixed-point numbers:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; +</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">take</span> <span class="nv">u0</span> <span class="p">(</span><span class="nv">uaddnof</span> <span class="nv">X</span> <span class="nv">Y</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">)))))</span>
<span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; -</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">take</span> <span class="nv">u0</span> <span class="p">(</span><span class="nv">uaddnof</span> <span class="nv">X</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">Y</span><span class="p">)</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">0</span><span class="p">)))))</span>
</code></pre></div></div>

<p>Subtraction is implemented by adding the negated version of the second operand.</p>

<p>We will now see how signed multiplication is implemented.</p>

<h3 id="signed-fixed-point-multiplication">Signed Fixed-Point Multiplication</h3>
<p>Signed fixed-point number multiplication is almost the same as unsigned ones,
except that the signs of the numbers have to be managed carefully.
Signed multiplication is implemented by reducing the operation to unsigned multiplication
by negating the number beforehand if the operand is a negative number,
and then negating back the result after multiplication.
This simple consideration of signs yields the following implementation:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; *</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="nv">&lt;</span> <span class="nv">X</span> <span class="nv">u0</span><span class="p">)</span>
     <span class="p">(</span><span class="k">COND</span>
       <span class="p">((</span><span class="nv">&lt;</span> <span class="nv">Y</span> <span class="nv">u0</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">ufixmult</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">Y</span><span class="p">)))</span>
       <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">negate</span> <span class="p">(</span><span class="nv">ufixmult</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">X</span><span class="p">)</span> <span class="nv">Y</span><span class="p">)))))</span>
    <span class="p">((</span><span class="nv">&lt;</span> <span class="nv">Y</span> <span class="nv">u0</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">negate</span> <span class="p">(</span><span class="nv">ufixmult</span> <span class="nv">X</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">Y</span><span class="p">))))</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">ufixmult</span> <span class="nv">X</span> <span class="nv">Y</span><span class="p">)))))</span>
</code></pre></div></div>

<h3 id="comparison">Comparison</h3>
<p>Comparison is first done by checking the sign of the numbers.
If the signs of both operands are different, we can immediately deduce that one operand is less than another.
In the case where the signs are the same for both operands, we subtract the absolute value of each operand
and check if the result is less than zero, i.e., it is a negative number.</p>

<p>So we start with a function that checks if a number is negative:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; isnegative</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span>
  <span class="p">(</span><span class="k">EQ</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">1</span><span class="p">)</span> <span class="p">(</span><span class="k">CAR</span> <span class="p">(</span><span class="nv">drop</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">u0</span><span class="p">)</span> <span class="nv">X</span><span class="p">)))))</span>
</code></pre></div></div>

<p>This can be done by simply checking if the sign bit at the end is <code class="language-html highlighter-rouge">1</code>,
since we have defined to use two’s complement as the representation of negative numbers.</p>

<p>We can then use this to write our algorithm mentioned before:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; &lt;</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">((</span><span class="nv">isnegative</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">COND</span>
                      <span class="p">((</span><span class="nv">isnegative</span> <span class="nv">Y</span><span class="p">)</span> <span class="p">(</span><span class="nv">isnegative</span> <span class="p">(</span><span class="nv">-</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">Y</span><span class="p">)</span> <span class="p">(</span><span class="nv">negate</span> <span class="nv">X</span><span class="p">))))</span>
                      <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">))))</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="k">COND</span>
                 <span class="p">((</span><span class="nv">isnegative</span> <span class="nv">Y</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">)</span>
                 <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="nv">isnegative</span> <span class="p">(</span><span class="nv">-</span> <span class="nv">X</span> <span class="nv">Y</span><span class="p">))))))))</span>
</code></pre></div></div>

<p>Comparison in the other direction is done by simply reversing the operands:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; &gt;</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">&lt;</span> <span class="nv">Y</span> <span class="nv">X</span><span class="p">)))</span>
</code></pre></div></div>

<h3 id="division-by-powers-of-two">Division by Powers of Two</h3>
<p>Although division for general numbers can be tricky,
dividing by powers of two can be done by simply shifting the bits by the exponent of the divisor:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; &lt;&lt; : Shift X by Y_u bits, where Y_u is in unary.</span>
  <span class="c1">;;      Note that since the bits are written in reverse order,</span>
  <span class="c1">;;      this works as division and makes the input number smaller.</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y_u</span><span class="p">)</span>
  <span class="p">(</span><span class="nv">+</span> <span class="p">(</span><span class="nv">drop</span> <span class="nv">Y_u</span> <span class="nv">X</span><span class="p">)</span> <span class="nv">u0</span><span class="p">)))</span>
</code></pre></div></div>

<p>As mentioned in the comment, shifting left becomes division since we are using a reverse order representation for numbers.</p>

<h3 id="relu">ReLU</h3>
<p>At this point, we can actually implement our first neural-network-related function,
the <a href="https://en.wikipedia.org/wiki/Rectifier_(neural_networks)">rectified linear unit</a> (ReLU).
Although having an intimidating name, it is actually identical to numpy’s <code class="language-html highlighter-rouge">clip</code> function
where certain numbers below a threshold are clipped to the threshold value.
For ReLU, the threshold is zero and can be implemented by simply checking the input’s sign and
returning zero if it is negative:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code> <span class="p">(</span><span class="k">QUOTE</span>
   <span class="c1">;; ReLUscal</span>
 <span class="p">)</span>
 <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span>
   <span class="p">(</span><span class="k">COND</span>
     <span class="p">((</span><span class="nv">isnegative</span> <span class="nv">X</span><span class="p">)</span> <span class="nv">u0</span><span class="p">)</span>
     <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nv">X</span><span class="p">))))</span>
</code></pre></div></div>

<p><code class="language-html highlighter-rouge">ReLUscal</code> takes scalar inputs. This is recursively applied inside <code class="language-html highlighter-rouge">ReLUvec</code> which accepts vector inputs.</p>

<h3 id="vector-dot-products">Vector Dot Products</h3>
<p>At this point, we have finished implementing all of the scalar operations required for
constructing a fully-connected neural network!
From now on we will write functions for multiple-element objects.</p>

<p>The most simple one is the dot product of two vectors,
which can be written by recursively adding the products of the elements of the input vectors:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; ================================================================</span>
  <span class="c1">;; vdot : Vector dot product</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">(</span><span class="nv">X</span> <span class="p">(</span><span class="nv">+</span> <span class="p">(</span><span class="nv">*</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">Y</span><span class="p">))</span>
          <span class="p">(</span><span class="nv">vdot</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">Y</span><span class="p">))))</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nv">u0</span><span class="p">))))</span>
</code></pre></div></div>

<p>Here, vectors are simply expressed as a list of scalars.
The vector <code class="language-html highlighter-rouge">(1 2 3)</code> can be written as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span> <span class="p">((</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>    <span class="nv">1</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>    <span class="nv">0</span> <span class="nv">1</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">)</span>
        <span class="p">(</span><span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>  <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span>    <span class="nv">1</span> <span class="nv">1</span> <span class="nv">0</span> <span class="nv">0</span> <span class="nv">0</span><span class="p">)))</span>
</code></pre></div></div>

<p>Vector addition works similarly except we construct a list instead of calculating the sum:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; vecadd</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">Y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">(</span><span class="nv">X</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="nv">+</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">Y</span><span class="p">))</span> <span class="p">(</span><span class="nv">vecadd</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">Y</span><span class="p">))))</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">))))</span>
</code></pre></div></div>

<h3 id="vector-matrix-multiplication">Vector-Matrix Multiplication</h3>
<p>Surprisingly, we can jump to vector-matrix multiplication right away once we have vector dot products.
We first implement matrices as a list of vectors.
Since each element in a matrix is a vector, we can write vector-matrix multiplication
by recursively iterating over each element of the input matrix:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; vecmatmulVAT : vec, mat -&gt; vec : Vector V times transposed matrix A</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">V</span> <span class="nv">AT</span><span class="p">)</span>
  <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">vecmatmulVAThelper</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">vecmatmulVAThelper</span> <span class="nv">AT</span><span class="p">))</span>
   <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">AT</span><span class="p">)</span>
     <span class="p">(</span><span class="k">COND</span>
       <span class="p">(</span><span class="nv">AT</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="nv">vdot</span> <span class="nv">V</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">AT</span><span class="p">))</span> <span class="p">(</span><span class="nv">vecmatmulVAThelper</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">AT</span><span class="p">))))</span>
       <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">)))))))</span>
</code></pre></div></div>

<p>An important property of this function is that the input matrix must be transposed before
calculating the correct result.
Usually, <code class="language-html highlighter-rouge">V @ A</code> where <code class="language-html highlighter-rouge">@</code> is matrix multiplication is defined by
multiplying the rows of <code class="language-html highlighter-rouge">V</code> with the columns of <code class="language-html highlighter-rouge">A</code>.
Taking the columns of <code class="language-html highlighter-rouge">A</code> is expensive in our Lisp implementation since we have to manage all of the
vector elements in <code class="language-html highlighter-rouge">A</code> at once in one iteration.
On the other hand, if we transpose <code class="language-html highlighter-rouge">A</code> before the multiplication,
all of the elements in each column become aligned in a single row which can be extracted at once as a single vector element.
Since we already have vector-vector multiplication, i.e., vector dot products defined,
this way of transposing <code class="language-html highlighter-rouge">A</code> beforehand blends in nicely with our function.
The name <code class="language-html highlighter-rouge">vecmatmulVAT</code> emphasizes this fact by writing <code class="language-html highlighter-rouge">AT</code> which means <code class="language-html highlighter-rouge">A</code> transposed.</p>

<h3 id="matrix-matrix-multiplication">Matrix-Matrix Multiplication</h3>
<p>Using vector-matrix multiplication, matrix-matrix multiplication can be implemented right away,
by iterating over the matrix at the first operand:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; matmulABT : mat, mat -&gt; mat : Matrix A times transposed matrix B</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">A</span> <span class="nv">BT</span><span class="p">)</span>
  <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">matmulABThelper</span><span class="p">)</span>
     <span class="p">(</span><span class="nv">matmulABThelper</span> <span class="nv">A</span><span class="p">))</span>
   <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">A</span><span class="p">)</span>
     <span class="p">(</span><span class="k">COND</span>
       <span class="p">(</span><span class="nv">A</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="nv">vecmatmulVAT</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">A</span><span class="p">)</span> <span class="nv">BT</span><span class="p">)</span> <span class="p">(</span><span class="nv">matmulABThelper</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">A</span><span class="p">))))</span>
       <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">)))))))</span>
</code></pre></div></div>

<p>Similar to <code class="language-html highlighter-rouge">vecmatmulVAT</code>, the second operand matrix <code class="language-html highlighter-rouge">B</code> is transposed as <code class="language-html highlighter-rouge">BT</code> in this function.</p>

<p>Note that we actually do not use matrix-matrix multiplication in our final neural network,
since the first operand is always a flattened vector,
and subsequent functions also always yield a vector as well.</p>

<h3 id="vector-argmax">Vector Argmax</h3>
<p>Taking the argmax of the vector, i.e., finding the index of the largest value in a vector
can simply be implemented by recursive comparison:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; vecargmax</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span>
  <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">vecargmaxhelper</span><span class="p">)</span>
    <span class="p">(</span><span class="nv">vecargmaxhelper</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">)</span> <span class="p">()</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">*</span><span class="p">))))</span>
   <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">curmax</span> <span class="nv">maxind</span> <span class="nv">curind</span><span class="p">)</span>
     <span class="p">(</span><span class="k">COND</span>
       <span class="p">(</span><span class="nv">X</span> <span class="p">(</span><span class="k">COND</span>
            <span class="p">((</span><span class="nv">&lt;</span> <span class="nv">curmax</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">))</span> <span class="p">(</span><span class="nv">vecargmaxhelper</span>
                                  <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)</span>
                                  <span class="p">(</span><span class="k">CAR</span> <span class="nv">X</span><span class="p">)</span>
                                  <span class="nv">curind</span>
                                  <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">*</span><span class="p">)</span> <span class="nv">curind</span><span class="p">)))</span>
            <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="p">(</span><span class="nv">vecargmaxhelper</span>
                                  <span class="p">(</span><span class="k">CDR</span> <span class="nv">X</span><span class="p">)</span>
                                  <span class="nv">curmax</span>
                                  <span class="nv">maxind</span>
                                  <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">*</span><span class="p">)</span> <span class="nv">curind</span><span class="p">)))))</span>
       <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nv">maxind</span><span class="p">)))))))</span>
</code></pre></div></div>

<p>A similar recursive function is <code class="language-html highlighter-rouge">img2vec</code>, where the <code class="language-html highlighter-rouge">*</code>-<code class="language-html highlighter-rouge">.</code> notation for the input image
is transformed to ones and zeros:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; img2vec</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">img</span><span class="p">)</span>
  <span class="p">(</span><span class="k">COND</span>
    <span class="p">(</span><span class="nv">img</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">COND</span>
                 <span class="p">((</span><span class="k">EQ</span> <span class="p">(</span><span class="k">CAR</span> <span class="nv">img</span><span class="p">)</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">*</span><span class="p">))</span> <span class="nv">1</span><span class="p">)</span>
                 <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nv">u0</span><span class="p">))</span>
               <span class="p">(</span><span class="nv">img2vec</span> <span class="p">(</span><span class="k">CDR</span> <span class="nv">img</span><span class="p">))))</span>
    <span class="p">((</span><span class="k">QUOTE</span> <span class="nc">T</span><span class="p">)</span> <span class="nc">NIL</span><span class="p">))))</span>
</code></pre></div></div>

<p>Here, the variable <code class="language-html highlighter-rouge">1</code> is bound to the fixed-point number one in the source code.</p>

<h3 id="the-neural-network">The Neural Network</h3>
<p><a href="/blog/assets/posts/2022-01-16/nn-diagram.svg"><img src="/blog/assets/posts/2022-01-16/nn-diagram.svg" alt="A diagram of our neural network." /></a></p>

<p>We are finally ready to define our neural network!
Following <a href="#the-model">the model</a>, our network can be defined as a chain of functions as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span>
  <span class="c1">;; nn</span>
<span class="p">)</span>
<span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">input</span><span class="p">)</span>
   <span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">F1</span> <span class="nv">F2</span> <span class="nv">F3</span> <span class="nv">F4</span> <span class="nv">F5</span> <span class="nv">F6</span> <span class="nv">F7</span> <span class="nv">F8</span><span class="p">)</span>
      <span class="p">(</span><span class="nv">F8</span> <span class="p">(</span><span class="nv">F7</span> <span class="p">(</span><span class="nv">F6</span> <span class="p">(</span><span class="nv">F5</span> <span class="p">(</span><span class="nv">F4</span> <span class="p">(</span><span class="nv">F3</span> <span class="p">(</span><span class="nv">F2</span> <span class="p">(</span><span class="nv">F1</span> <span class="nv">input</span><span class="p">)))))))))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">img2vec</span> <span class="nv">X</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">vecmatmulVAT</span> <span class="nv">X</span> <span class="nv">A_1_T</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">vecadd</span> <span class="nv">X</span> <span class="nv">B_1</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">ReLUvec</span> <span class="nv">X</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">vecmatmulVAT</span> <span class="nv">X</span> <span class="nv">A_2_T</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">vecadd</span> <span class="nv">X</span> <span class="nv">B_2</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nv">vecargmax</span> <span class="nv">X</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="nb">nth</span> <span class="nv">X</span> <span class="nv">digitlist</span><span class="p">))))))</span>
</code></pre></div></div>

<p>This represents a chain of functions
from the <code class="language-html highlighter-rouge">input</code> to the <code class="language-html highlighter-rouge">nth</code> argument of <code class="language-html highlighter-rouge">digitlist</code>, which is a list of atoms
of the digits, <code class="language-html highlighter-rouge">(QUOTE (0 1 2 3 4 5 6 7 8 9))</code>.</p>

<p>Here, <code class="language-html highlighter-rouge">A_1_T</code>, <code class="language-html highlighter-rouge">B_1</code>, <code class="language-html highlighter-rouge">A_2_T</code>, and <code class="language-html highlighter-rouge">B_2</code> are the model parameters obtained from the <a href="#training-the-neural-network">training</a>
section, converted to our fixed-point number system.</p>

<h2 id="results">Results</h2>
<p>Now let’s try actually running our Lisp neural network!
We will use the i8086 emulator <a href="https://justine.lol/blinkenlights/">Blinkenlights</a>.
Instructions for running the program in this emulator is described in the
<a href="#running-the-neural-network-on-your-computer">running the neural network on your computer</a> section.</p>

<p>Let’s first try giving the network the following image of the digit 5:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span>
        <span class="nv">*</span> <span class="nv">.</span> <span class="nv">.</span>
        <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span>
        <span class="nv">.</span> <span class="nv">.</span> <span class="nv">*</span>
        <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span><span class="p">))</span>
</code></pre></div></div>

<p>It turns out like this:</p>

<p><a href="/blog/assets/posts/2022-01-16/ss-nn.png"><img src="/blog/assets/posts/2022-01-16/ss-nn.png" alt="The pure Lisp neural network in action." /></a></p>

<p>The network correctly predicts the digit shown in the image!</p>

<p>Although the original network was trained in an environment where 64-bit floating-point numbers were available,
our system of 18-bit fixed-point numbers was also capable of running this network with the same parameters truncated to fit in 18 bits.</p>

<h3 id="new-unseen-input-with-noise">New Unseen Input with Noise</h3>
<p>Now let’s try giving another digit:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="nv">*</span> <span class="nv">*</span> <span class="nv">.</span>
        <span class="nv">.</span> <span class="nv">.</span> <span class="nv">*</span>
        <span class="nv">.</span> <span class="nv">*</span> <span class="nv">*</span>
        <span class="nv">*</span> <span class="nv">.</span> <span class="nv">.</span>
        <span class="nv">*</span> <span class="nv">*</span> <span class="nv">*</span><span class="p">))</span>
</code></pre></div></div>

<p>Notice that this image is not apparent in the training set, or even in the test dataset.
Therefore, the network has never seen this image before, and it is the very first time that it sees this image.</p>

<p>Can the network correctly predict the digit shown in this image? The results were as follows:</p>

<p><a href="/blog/assets/posts/2022-01-16/ss-nn-2.png"><img src="/blog/assets/posts/2022-01-16/ss-nn-2.png" alt="The pure Lisp neural network in action." /></a></p>

<p>The network predicted the digit correctly!</p>

<p>Even for images that were never seen before,
the neural network was able to learn how to interpret images of digits only by giving some examples of digit images.
This is the magic of neural networks!</p>

<p>Therefore, in a way, we have taught a Lisp interpreter that runs on the IBM PC model 5150 what digits are,
only by providing example pictures of digits in the process.
Of course, the accumulation of knowledge through training the network was done on a modern computer,
but that knowledge was handed on to a 512-byte program that is capable of running on vintage hardware.</p>

<h2 id="closing-remarks">Closing Remarks</h2>
<p>It was very fun building a neural network from the bottom up using only first principles of symbolic manipulation.
This is what it means for a programming language to be Turing-complete - it can basically do anything that any other modern computers are capable of.</p>

<p>As mentioned at the beginning of this post, Lisp was used as a language for creating advanced artificial intelligence
after its birth in 1958.
60 years later in 2018, Yoshua Bengio, Geoffrey Hinton, and Yann LeCun received the <a href="https://awards.acm.org/about/2018-turing">Turing Award</a>
for establishing the foundations of modern Deep Learning.
In a way, using a Turing-complete Lisp interpreter to implement neural networks revisits this history of computer science.</p>

<h2 id="credits">Credits</h2>
<p>The neural network for SectorLISP and its fixed-point number system discussed in this blog post were implemented by Hikaru Ikuta.
The SectorLISP project was first started by Justine Tunney
and was created by the authors who have contributed to <a href="https://github.com/jart/sectorlisp">the project</a>,
and the authors credited in the original <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a>.
The i8086 emulator <a href="https://justine.lol/blinkenlights/">Blinkenlights</a> was created by Justine Tunney.
The neural network diagram was created using <a href="https://www.diagrams.net/">diagrams.net</a>.
The training and testing dataset, as well as the fully connected neural network model, were inspired by
a <a href="https://aidiary.hatenablog.com/entry/20050505/1274165051">blog post</a> (in Japanese)
written by Koichiro Mori (<a href="https://profile.hatena.ne.jp/aidiary/">aidiary</a>) from DeNA.
The TensorFlow implementation of the model was referenced from the <a href="https://www.tensorflow.org/tutorials/quickstart/beginner">TensorFlow 2 quickstart for beginners</a>
entry from the TensorFlow documentation.</p>]]></content><author><name></name></author><category term="Machine_Learning" /><category term="Neural_Networks" /><category term="Lisp" /><category term="x86" /><category term="SectorLISP" /><summary type="html"><![CDATA[A neural network written in pure Lisp without built-in numbers using only atoms and lists in SectorLISP, a 512-byte Lisp interpreter written by the authors of the SectorLISP project.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://woodrush.github.io/blog/assets/posts/2022-01-16/nn-diagram.png" /><media:content medium="image" url="https://woodrush.github.io/blog/assets/posts/2022-01-16/nn-diagram.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Lisp Interpreter Implemented in Conway’s Game of Life</title><link href="https://woodrush.github.io/blog/posts/2022-01-12-lisp-in-life.html" rel="alternate" type="text/html" title="A Lisp Interpreter Implemented in Conway’s Game of Life" /><published>2022-01-12T18:01:35+09:00</published><updated>2022-01-12T18:01:35+09:00</updated><id>https://woodrush.github.io/blog/posts/lisp-in-life</id><content type="html" xml:base="https://woodrush.github.io/blog/posts/2022-01-12-lisp-in-life.html"><![CDATA[<p><a href="/blog/assets/posts/2022-01-12-lisp-in-life/ss2.png"><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss2.png" alt="A screenshot of the Lisp in Life architecture." /></a></p>

<p>Lisp in Life is a Lisp interpreter implemented in Conway’s Game of Life.</p>

<p>The entire pattern is viewable on the browser <a href="https://woodrush.github.io/lisp-in-life">here</a>.</p>

<p>To the best of my knowledge, this is the first time a high-level programming language was interpreted in Conway’s Game of Life.</p>

<p>Source codes and pattern files are available at the GitHub repository
<a href="https://github.com/woodrush/lisp-in-life">https://github.com/woodrush/lisp-in-life</a>.</p>

<h2 id="running-lisp-on-the-game-of-life">Running Lisp on the Game of Life</h2>
<p>Lisp is a language with a simple and elegant design, having an extensive ability to express sophisticated ideas as simple programs. Notably, the powerful feature of <em>macros</em> could be used to modify the language’s syntax to write programs in a highly flexible way. For example, macros can be used to introduce new programming paradigms to the language, as demonstrated in <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a> (which can actually be evaluated by the interpreter, although complex programs take quite a long time to finish running), where a structure and syntax similar to classes in Object Oriented Programming is constructed. Despite the expressibility of Lisp, it is <a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">the world’s second oldest high-level programming language</a> introduced in 1958, only to be preceded by Fortran.</p>

<p>Conway’s Game of Life is a cellular automaton proposed in 1970. Despite it having a very simple set of rules, it is known to be Turing Complete. Lisp in Life demonstrates this fact in a rather straightforward way.</p>

<p>How can simple systems allow human thoughts to be articulated and be expanded? With the expressibility of Lisp and the basis of Conway’s Game of Life, Lisp in Life provides an answer to this question.</p>

<h3 id="input-and-output">Input and Output</h3>
<p>The Lisp program is provided by editing certain cells within the pattern to represent the ASCII-encoding of the Lisp program. The pattern directly reads this text and evaluates the results. You can also load your own Lisp program into the pattern and run it.
The standard output is written at the bottom end of the RAM module, which can be easily located and directly examined in a Game of Life viewer.
The Lisp implementation supports lexical closures and macros, allowing one to write Lisp programs in a Lisp-like taste, as far as the memory limit allows you to.</p>

<p>The <a href="https://github.com/woodrush/lisp-in-life/blob/main/src/lisp.c">Lisp interpreter</a> is written in C. Using the build system for this project, you can also compile your own C11-compatible C code and run in on Conway’s Game of Life.</p>

<h3 id="previous-work">Previous Work</h3>
<p>As previously mentioned,
to the best of my knowledge, this is the first time a high-level programming language was interpreted in Conway’s Game of Life.</p>

<p>The entry featuring <a href="https://www.conwaylife.com/wiki/Universal_computer">Universal Computers</a> in LifeWiki has a list of computers created in the Game of Life.
Two important instances not mentioned in this entry are the <a href="https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673">Quest For Tetris</a> (QFT) Project
created by the authors of the QFT project, and <a href="https://www.conwaylife.com/wiki/APGsembly">APGsembly</a> created by Adam P. Goucher.
All of these work are designed to run an assembly language and are not designed to interpret a high-level language per se.</p>

<p>An example of a compiled high-level language targeted for the Game of Life is Cogol by the QFT project.
Cogol is compiled to the assembly language QFTASM, targeted for the QFT architecture.
Although Cogol is targeted for the QFT architecture, it requires compilation to QFTASM for the code to be run in the QFT architecture.</p>

<p>In Lisp in Life, a modified version of the QFT architecture is first created for improving the pattern’s runtime.
Modifications include introducing a new cascaded storage architecture for the ROM, new opcodes, extending the ROM and RAM address space, etc.
The Lisp source code is then written into the computer’s RAM module as its raw binary ASCII format.
The Conway’s Game of Life pattern directly reads, parses, and evaluates this Lisp source code to produce its output.
This feature of allowing a Conway’s Game of Life pattern to evaluate a high-level programming language expressed as a string of text
is a novel feature that was newly achieved in this project.</p>

<h2 id="screenshots">Screenshots</h2>
<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss1.png" alt="An overview of the entire architecture." /></p>

<p>An overview of the entire architecture.</p>

<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss2.png" alt="An overview of the CPU and its surrounding units." /></p>

<p>An overview of the CPU and its surrounding modules. On the top are the ROM modules, with the lookup module on the right, and the value modules on the left. On the bottom left is the CPU. On the bottom right is the RAM module.</p>

<p>This pattern is the VarLife version of the architecture. VarLife is an 8-state cellular automaton defined in the <a href="https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673">Quest For Tetris</a> (QFT) Project, which is used as an intermediate layer to create the final Conway’s Game of Life pattern. The colors of the cells indicate the 8 distinct states of the VarLife rule.</p>

<p>The architecture is based on <a href="https://github.com/QuestForTetris/QFT/blob/master/Tetris8.mc">Tetris8.mc</a> in the <a href="https://github.com/QuestForTetris/QFT">original QFT repository</a>. Various modifications were made to make the pattern compact, such as introducing a new lookup table architecture for the ROM, removing and adding new opcodes, expanding the ROM and RAM address space, etc.</p>

<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss3.png" alt="The Conway's Game of Life version of the architecture, converted from the VarLife pattern." /></p>

<p>The Conway’s Game of Life version of the architecture, converted from the VarLife pattern.
What appears to be a single cell in this image is actually an <a href="https://www.conwaylife.com/wiki/OTCA_metapixel">OTCA metapixel</a> zoomed away to be shown 2048 times smaller.</p>

<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss4.png" alt="A close-up view of a part of the ROM module in the Conway's Game of Life version." /></p>

<p>A close-up view of a part of the ROM module in the Conway’s Game of Life version.
Each pixel in the previous image is actually this square-shaped structure shown in this image.
These structures are <a href="https://www.conwaylife.com/wiki/OTCA_metapixel">OTCA metapixels</a>, which can be seen to be in the On and Off meta-states in this image.
The OTCA Metapixel is a special Conway’s Game of Life pattern that can emulate cellular automatons with customized rules.
The original VarLife pattern is simulated this way so that it can run in Conway’s Game of Life.</p>

<p>The OTCA Metapixel simulating Life in Life can be seen in this wonderful video by Phillip Bradbury: <a href="https://www.youtube.com/watch?v=xP5-iIeKXE8">https://www.youtube.com/watch?v=xP5-iIeKXE8</a></p>

<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/lisp_512B_ram_printstdin_QFT.mc.gif" alt="A video of the RAM module of the computer in the VarLife rule in action." /></p>

<p>A video of the RAM module in the VarLife rule in action.</p>

<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss6.png" alt="The computer showing the results of the computation of `(print (* 3 14))`." /></p>

<p>The computer showing the results of the following Lisp program:</p>

<div class="language-lisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="nv">define</span> <span class="nv">mult</span> <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">m</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">*</span> <span class="nv">m</span> <span class="nv">n</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">print</span> <span class="p">(</span><span class="nv">mult</span> <span class="mi">3</span> <span class="mi">14</span><span class="p">))</span>
</code></pre></div></div>

<p>The result is <code class="language-html highlighter-rouge">42</code>, shown in binary ascii format (<code class="language-html highlighter-rouge">0b110100</code>, <code class="language-html highlighter-rouge">0b110010</code>), read in bottom-to-up order.</p>

<p>As shown in this image, the standard output of the Lisp program gets written at the bottom end of the RAM module, and can be directly viewed in a Game of Life viewer.
This repository also contains scripts that run on Golly to decode and view the contents of the output as strings.</p>

<h2 id="how-is-it-done">How is it Done?</h2>
<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/build-flow.png" alt="The build flow of Lisp in Life." /></p>

<p>The <a href="https://github.com/woodrush/lisp-in-life/blob/main/src/lisp.c">Lisp interpreter</a>, written in C, is compiled to an assembly language for a CPU architecture implemented in the Game of Life, which is a modification of the computer used in the <a href="https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673">Quest For Tetris</a> (QFT) project. The compilation is done using an extended version of <a href="https://github.com/shinh/elvm">ELVM</a> (the Esoteric Language Virtual Machine). The Game of  Life backend for ELVM was implemented by myself.</p>

<p>Generating a small enough pattern that runs in a reasonable amount of time required a lot of effort.
This required optimizations and improvements in every layer of the project; a brief summary would be:</p>

<ul>
  <li>The C Compiler layer - adding the <a href="https://en.wikipedia.org/wiki/Goto#Computed_GOTO_and_Assigned_GOTO">computed goto</a> feature to the C compiler, preserving variable symbols to be used after compilation, etc.</li>
  <li>The C layer (the <a href="https://github.com/woodrush/lisp-in-life/blob/main/src/lisp.c">Lisp interpreter</a>) - using a string hashtable and binary search for Lisp symbol lookup, minimization of stack region usage with union memory structures, careful memory region map design, etc.</li>
  <li>The QFTASM layer - writing a <a href="https://github.com/woodrush/lisp-in-life/blob/main/src/qftasmopt.py">compiler optimizer</a> to optimize the length of the assembly code</li>
  <li>The VarLife layer (the CPU architecture) - creating a lookup table architecture for faster ROM access, expanding the size and length of the RAM module, adding new opcodes, etc.</li>
  <li>The Game of Life layer - <a href="https://en.wikipedia.org/wiki/Hashlife">Hashlife</a>-specific optimization</li>
</ul>

<p>A more detailed description of the optimizations done in this project is available in the <a href="#implementation-details">Implementation Details</a> section.</p>

<h3 id="conversion-from-varlife-to-conways-game-of-life">Conversion from VarLife to Conway’s Game of Life</h3>
<p>VarLife is an 8-state cellular automaton defined in the <a href="https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673">Quest For Tetris</a> (QFT) Project.
It is used as an intermediate layer to generate the final Conway’s Game of Life pattern; the computer is first created in VarLife, and then converted to a Game of Life pattern.</p>

<p>When converting VarLife to Conway’s Game of Life, each VarLife cell is mapped to an <a href="https://www.conwaylife.com/wiki/OTCA_metapixel">OTCA Metapixel</a> (OTCAMP). The conversion from VarLife to the Game of Life is done in a way so that the behavior of the states of the VarLife pattern matches exactly with the meta-states of the OTCA Metapixels in the converted Game of Life pattern.
Therefore, it is enough to verify the behavior of the VarLife pattern to verify the behavior of the Game of Life pattern.</p>

<p>Due to the use of OTCA Metapixels, each VarLife cell becomes extended to a 2048x2048 Game of Life cell, and 1 VarLife generation requires 35328 Game of Life generations. Therefore, the VarLife patterns run significantly faster than the Game of Life (GoL) version.</p>

<p>Additional details on VarLife are available in the <a href="#miscellaneous">Miscellaneous</a> section.</p>

<h2 id="pattern-files">Pattern Files</h2>

<table>
  <thead>
    <tr>
      <th>Program</th>
      <th>VarLife Pattern</th>
      <th>Conway’s Game of Life Pattern</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_print.mc">QFT_print.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_print_metafied.mc">QFT_print_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/lambda.lisp">lambda.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_lambda.mc">QFT_lambda.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_lambda_metafied.mc">QFT_lambda_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/printquote.lisp">printquote.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_printquote.mc">QFT_printquote.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_printquote_metafied.mc">QFT_printquote_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/factorial.lisp">factorial.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_factorial.mc">QFT_factorial.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_factorial_metafied.mc">QFT_factorial_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/z-combinator.lisp">z-combinator.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_z-combinator.mc">QFT_z-combinator.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_z-combinator_metafied.mc">QFT_z-combinator_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote-splice.lisp">backquote-splice.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_backquote-splice.mc">QFT_backquote-splice.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_backquote-splice_metafied.mc">QFT_backquote-splice_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote.lisp">backquote.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_backquote.mc">QFT_backquote.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_backquote_metafied.mc">QFT_backquote_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_object-oriented-like.mc">QFT_object-oriented-like.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_object-oriented-like_metafied.mc">QFT_object-oriented-like_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes-print.lisp">primes-print.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_primes-print.mc">QFT_primes-print.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_primes-print_metafied.mc">QFT_primes-print_metafied.mc</a></td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes.lisp">primes.lisp</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_primes.mc">QFT_primes.mc</a></td>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_primes_metafied.mc">QFT_primes_metafied.mc</a></td>
    </tr>
  </tbody>
</table>

<p>Pattern files preloaded with various Lisp programs are available here.
Detailed statistics such as the running time and the memory consumption are available in the <a href="#running-times-and-statistics">Running Times and Statistics</a> section.</p>

<p>The patterns can be simulated on the Game of Life simulator <a href="https://en.wikipedia.org/wiki/Golly_(program)">Golly</a>.</p>

<p>The VarLife patterns can be simulated on Golly as well.
To run the VarLife patterns, open Golly and see File -&gt; Preferences -&gt; Control, and Check the “Your Rules” directory.
Open the directory, and copy <a href="https://github.com/woodrush/QFT-devkit/blob/main/Varlife.rule">https://github.com/woodrush/QFT-devkit/blob/main/QFT-devkit/Varlife.rule</a> to the directory.</p>

<h2 id="descriptions-of-the-lisp-programs">Descriptions of the Lisp Programs</h2>

<ul>
  <li>
    <p><strong>object-oriented-like.lisp</strong>:
  This example creates a structure similar to classes in Object-Oriented Programming, using closures.</p>

    <ul>
      <li>The class has methods and field variables, where each instance carries distinct and persistent memory locations of their own.
  The example instantiates two counters and concurrently modifies the value held by each instance.</li>
      <li>New syntaxes for instantiation and method access, <code class="language-html highlighter-rouge">(new classname)</code> and <code class="language-html highlighter-rouge">(. instance methodname)</code>, are introduced using macros and functions.</li>
    </ul>

    <p>The Lisp interpreter’s variable scope and the macro feature is powerful enough to manage complex memory management,
  and even providing a new syntax to support the target paradigm.</p>
  </li>
  <li>
    <p><strong>printquote.lisp</strong>: A simple demonstration of macros.</p>
  </li>
  <li>
    <p><strong>factorial.lisp</strong>: A simple demonstration of recursion with the factorial function.</p>
  </li>
  <li>
    <p><strong>z-combinator.lisp</strong>:
Demonstration of the <a href="https://en.wikipedia.org/wiki/Fixed-point_combinator#Strict_fixed-point_combinator">Z Combinator</a> to implement a factorial function
using <a href="https://en.wikipedia.org/wiki/Anonymous_recursion">anonymous recursion</a>.</p>
  </li>
  <li>
    <p><strong>backquote-splice.lisp</strong>:
Implements the <a href="http://cl-cookbook.sourceforge.net/macros.html#LtohTOCentry-2">backquote macro</a> used commonly in Lisp to construct macros.
It also supports the unquote and unquote-splice operations, each written as <code class="language-html highlighter-rouge">~</code> and <code class="language-html highlighter-rouge">~@</code>.</p>
  </li>
  <li>
    <p><strong>primes.lisp</strong>: Prints a list of prime numbers up to 20. This example highlights the use of the <code class="language-html highlighter-rouge">while</code> syntax.</p>
  </li>
</ul>

<p>The contents of print.lisp is quite straightforward - it calculates and prints the result of <code class="language-html highlighter-rouge">3 * 14</code>.
backquote.lisp and primes-print.lisp are similar to backquote-splice.lisp and primes.lisp, mainly included for performance comparisons.
backquote.lisp doesn’t implement the unquote-splice operation, and demonstrates some more examples.
primes-print.lisp reduces the number of list operations to save memory usage.</p>

<h2 id="details-of-the-lisp-interpreter">Details of the Lisp Interpreter</h2>
<h3 id="special-forms-and-builtin-functions">Special Forms and Builtin Functions</h3>

<ul>
  <li>define</li>
  <li>if</li>
  <li>quote</li>
  <li>car, cdr</li>
  <li>cons</li>
  <li>list</li>
  <li>atom</li>
  <li>print</li>
  <li>progn</li>
  <li>while</li>
  <li>lambda, macro</li>
  <li>eval</li>
  <li>eq</li>
  <li>+, -, *, /, mod, &lt;, &gt;</li>
</ul>

<h3 id="lexical-closures">Lexical Closures</h3>
<p>This Lisp interpreter supports lexical closures.
The implementation of lexical closures is powerful enough to write an object-oriented-like code as shown in <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a>,
where classes are represented as lexical closures over the field variables and the class methods.</p>

<h3 id="macros">Macros</h3>
<p>This Lisp interpreter supports macros. Lisp macros can be thought as a function that receives code and returns code.
Following this design, macros are treated exacly the same as lambdas, except that it takes the arguments as raw S-expressions,
and evaluates the result twice (the first time to build the expression, and the second time to actually evaluate the builded expression).</p>

<h2 id="running-times-and-statistics">Running Times and Statistics</h2>

<p><strong>VarLife Patterns</strong></p>

<table>
  <thead>
    <tr>
      <th>Lisp Program and Pattern (VarLife)</th>
      <th>#Halting Generations (VarLife)</th>
      <th>Running Time (VarLife)</th>
      <th>Memory Usage (VarLife)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a>                               [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_print.mc">pattern</a>]</td>
      <td>105,413,068 (exact)</td>
      <td>1.159 mins</td>
      <td>5.0 GiB</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/lambda.lisp">lambda.lisp</a>                             [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_lambda.mc">pattern</a>]</td>
      <td>700,000,000</td>
      <td>2.966 mins</td>
      <td>12.5 GiB</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/printquote.lisp">printquote.lisp</a>                     [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_printquote.mc">pattern</a>]</td>
      <td>800,000,000</td>
      <td>3.424 mins</td>
      <td>12.5 GiB</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/factorial.lisp">factorial.lisp</a>                       [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_factorial.mc">pattern</a>]</td>
      <td>1,000,000,000</td>
      <td>5.200 mins</td>
      <td>17.9 GiB</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/z-combinator.lisp">z-combinator.lisp</a>                 [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_z-combinator.mc">pattern</a>]</td>
      <td>1,700,000,000</td>
      <td>9.823 mins</td>
      <td>23.4 GiB</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote-splice.lisp">backquote-splice.lisp</a>         [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_backquote-splice.mc">pattern</a>]</td>
      <td>4,100,000,000</td>
      <td>20.467 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote.lisp">backquote.lisp</a>                       [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_backquote.mc">pattern</a>]</td>
      <td>4,100,000,000</td>
      <td>21.663 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a> [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_object-oriented-like.mc">pattern</a>]</td>
      <td>4,673,000,000</td>
      <td>22.363 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes-print.lisp">primes-print.lisp</a>                 [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_primes-print.mc">pattern</a>]</td>
      <td>8,880,000,000</td>
      <td>27.543 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes.lisp">primes.lisp</a>                             [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//QFT_primes.mc">pattern</a>]</td>
      <td>9,607,100,000</td>
      <td>38.334 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
  </tbody>
</table>

<p><strong>Conway’s Game of Life (GoL) Patterns</strong></p>

<table>
  <thead>
    <tr>
      <th>Lisp Program and Pattern (GoL)</th>
      <th>#Halting Generations (GoL)</th>
      <th>Running Time (GoL)</th>
      <th>Memory Usage (GoL)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a>                               [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_print_metafied.mc">pattern</a>]</td>
      <td>3,724,032,866,304</td>
      <td>382.415 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/lambda.lisp">lambda.lisp</a>                             [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_lambda_metafied.mc">pattern</a>]</td>
      <td>24,729,600,000,000</td>
      <td>1372.985 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/printquote.lisp">printquote.lisp</a>                     [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_printquote_metafied.mc">pattern</a>]</td>
      <td>28,262,400,000,000</td>
      <td>1938.455 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/factorial.lisp">factorial.lisp</a>                       [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_factorial_metafied.mc">pattern</a>]</td>
      <td>35,328,000,000,000</td>
      <td>3395.371 mins</td>
      <td>27.5 GiB (max.)</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/z-combinator.lisp">z-combinator.lisp</a>                 [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_z-combinator_metafied.mc">pattern</a>]</td>
      <td>60,057,600,000,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote-splice.lisp">backquote-splice.lisp</a>         [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_backquote-splice_metafied.mc">pattern</a>]</td>
      <td>144,844,800,000,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote.lisp">backquote.lisp</a>                       [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_backquote_metafied.mc">pattern</a>]</td>
      <td>144,844,800,000,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a> [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_object-oriented-like_metafied.mc">pattern</a>]</td>
      <td>165,087,744,000,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes-print.lisp">primes-print.lisp</a>                 [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_primes-print_metafied.mc">pattern</a>]</td>
      <td>313,712,640,000,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes.lisp">primes.lisp</a>                             [<a href="https://github.com/woodrush/lisp-in-life/blob/main/patterns//metafied/QFT_primes_metafied.mc">pattern</a>]</td>
      <td>339,399,628,800,000</td>
      <td>-</td>
      <td>-</td>
    </tr>
  </tbody>
</table>

<p><strong>Common Statistics</strong></p>

<table>
  <thead>
    <tr>
      <th>Lisp Program</th>
      <th>#QFT CPU Cycles</th>
      <th>QFT RAM Usage (Words)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a></td>
      <td>4,425</td>
      <td>92</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/lambda.lisp">lambda.lisp</a></td>
      <td>13,814</td>
      <td>227</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/printquote.lisp">printquote.lisp</a></td>
      <td>18,730</td>
      <td>271</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/factorial.lisp">factorial.lisp</a></td>
      <td>28,623</td>
      <td>371</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/z-combinator.lisp">z-combinator.lisp</a></td>
      <td>58,883</td>
      <td>544</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote-splice.lisp">backquote-splice.lisp</a></td>
      <td>142,353</td>
      <td>869</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/backquote.lisp">backquote.lisp</a></td>
      <td>142,742</td>
      <td>876</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a></td>
      <td>161,843</td>
      <td>838</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes-print.lisp">primes-print.lisp</a></td>
      <td>281,883</td>
      <td>527</td>
    </tr>
    <tr>
      <td><a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/primes.lisp">primes.lisp</a></td>
      <td>304,964</td>
      <td>943</td>
    </tr>
  </tbody>
</table>

<p>The running times for each program are shown above. The <a href="https://en.wikipedia.org/wiki/Hashlife">Hashlife</a> algorithm used for the simulation requires a lot of memory in exchange of speedups.
The simulations were run on a 32GB-RAM computer, with Golly’s memory usage limit set to 28000 MB, and the default base step to 2 (configurable from the preferences).
The memory usage was measured by Ubuntu’s activity monitor. “(max.)” shows where the maximum permitted memory was used.
The number of CPU cycles and the QFT memory usage was obtained by running the QFTASM interpreter on the host PC.
The QFT memory usage shows the number of RAM addresses that were written at least once.
The memory usage is measured in words, which is 16 bits in this architecture.</p>

<p>All of the VarLife patterns can actually be run on a computer. The shortest running time is about 1 minute for <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a>.
A sophisticated program such as <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/object-oriented-like.lisp">object-oriented-like.lisp</a> can even run in about 22 minutes.</p>

<p>On the other hand, the Game of Life patterns take significantly more time than the VarLife patterns, but for short programs it can be run in a moderately reasonable amount of time.
For example, <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a> finishes running in about 6 hours in the Game of Life pattern.
As mentioned in the “Conversion from VarLife to Conway’s Game of Life” section, since the Game of Life pattern emulates the behavior of the VarLife pattern using OTCA Metapixels,
the behavior of the Game of Life patterns can be verified by running the VarLife patterns.</p>

<h2 id="tests">Tests</h2>
<p>There are tests to check the behavior of the Lisp interpreter.
There is a test for checking the QFTASM-compiled Lisp interpreter using the QFTASM interpreter, and a test for checking the GCC-compiled Lisp interpreter on the host pc.
To run these tests, use the following commands:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>git submodule update <span class="nt">--init</span> <span class="nt">--recursive</span> <span class="c"># Required for building the source</span>

make <span class="nb">test</span>             <span class="c"># Run the tests for the QFTASM-compiled Lisp interpreter, using the QFTASM interpreter</span>
make test_executable  <span class="c"># Run the tests for the executable compiled by GCC</span>
</code></pre></div></div>

<p>Running <code class="language-html highlighter-rouge">make test</code> requires <a href="https://github.com/hylang/hy">Hy</a>, a Clojure-like Lisp implemented in Python available via <code class="language-html highlighter-rouge">pip install hy</code>.
Some of the tests compare the output results of Hy and the output of the QFTASM Lisp interpreter.</p>

<p>The tests were run on Ubuntu and Mac.</p>

<h2 id="building-from-source">Building from Source</h2>
<p>This section explains how to load the Lisp interpreter (written in C) to the Game of Life pattern, and also how to load a custom Lisp program into the pattern to run it on Game of Life.</p>

<p>Please see <a href="https://github.com/woodrush/lisp-in-life/blob/main/build.md">build.md</a> from the GitHub repository.</p>

<h2 id="implementation-details">Implementation Details</h2>
<p>This section describes the implementation details for the various optimizations for the QFT assembly and the resulting Game of Life pattern.</p>

<h3 id="the-c-compiler-layer">The C Compiler layer</h3>
<ul>
  <li>Added the computed goto feature to ELVM
    <ul>
      <li>This was merged into the original ELVM project.</li>
    </ul>
  </li>
  <li>Modified the compiler to preserve and output memory address symbols and program address symbols, for their usage in the compiler optimization tool in the QFTASM layer
    <ul>
      <li>This allows to use <a href="https://github.com/woodrush/lisp-in-life/blob/main/src/memheader.eir">memheader.eir</a>, so that symbols used in the C source can be referenced in the ELVM assembly layer using the same variable symbols.</li>
    </ul>
  </li>
</ul>

<h3 id="the-elvm-assembly-layer">The ELVM Assembly layer</h3>
<ul>
  <li>Wrote the QFTASM backend for ELVM
    <ul>
      <li>This was merged into the original ELVM project.</li>
    </ul>
  </li>
  <li>Added further improvements to the QFTASM backend:
    <ul>
      <li>Let the ELVM assembly’s memory address space match QFT’s native memory address space
        <ul>
          <li>Originally, the ELVM assembly had to convert its memory address every time when a memory access occurs.</li>
        </ul>
      </li>
      <li>Support new opcodes added in the improved QFT architecture</li>
    </ul>
  </li>
</ul>

<h3 id="the-c-layer-the-implementation-of-the-lisp-interpreter">The C layer (the implementation of the Lisp interpreter)</h3>
<h4 id="usage-of-binary-search-and-hashtables-for-string-representations-and-comparisons">Usage of binary search and hashtables for string representations and comparisons</h4>
<p>By profiling the GCC-compiled version of the Lisp interpreter, it was found that the string table lookup process was a large performance bottleneck. This was a large room for optimization.</p>

<p>The optimized string lookup process is as follows.
First, when the Lisp parser accepts a symbol token, it creates a 4-bit hash of the string with the checksum of the ASCII representation of the string. The hash points to a hashtable that holds the root of a binary search tree for string comparison. Each node in the tree holds the string of the symbol token, and two nodes that are before and after the token in alphabetical order. When a query symbol token arrives in the parsing phase, a node with a matching token is returned, or a new node for the token is added into this binary tree if the token does not exist yet. This allows for each distinct symbol in the S-expression to have a distinct memory address.</p>

<p>In the interpretation phase, since each distinct symbol has a distinct memory address, and every string required for the Lisp program has already been parsed, string comparison can be done by simply comparing the memory address of the tokens. Since the interpreter only uses string equality operations for string comparison, simply checking for integer equality suffices for string comparison, speeding up the interpretation phase. Since the hash key is 4 bits long, this allows for reducing 4 searches in the binary tree compared to using a single binary tree.</p>

<h4 id="usage-of-jump-hash-tables-for-the-special-form-evaluation-procedure-searches">Usage of jump hash tables for the special form evaluation procedure searches</h4>
<p>There are 17 distinct procedures for evaluating the special forms in the Lisp interpreter,
<code class="language-html highlighter-rouge">define</code>, <code class="language-html highlighter-rouge">if</code>, <code class="language-html highlighter-rouge">quote</code>, <code class="language-html highlighter-rouge">car</code>, <code class="language-html highlighter-rouge">cdr</code>, <code class="language-html highlighter-rouge">cons</code>, <code class="language-html highlighter-rouge">atom</code>, <code class="language-html highlighter-rouge">print</code>, <code class="language-html highlighter-rouge">progn</code>, <code class="language-html highlighter-rouge">while</code>, {<code class="language-html highlighter-rouge">lambda</code>, <code class="language-html highlighter-rouge">macro</code>}, <code class="language-html highlighter-rouge">eval</code>, <code class="language-html highlighter-rouge">eq</code>, {<code class="language-html highlighter-rouge">+</code>, <code class="language-html highlighter-rouge">-</code>, <code class="language-html highlighter-rouge">*</code>, <code class="language-html highlighter-rouge">/</code>, <code class="language-html highlighter-rouge">mod</code>}, {<code class="language-html highlighter-rouge"><span class="nt">&lt;</span></code>, <code class="language-html highlighter-rouge">&gt;</code>}, <code class="language-html highlighter-rouge">list</code>, and lambda/macro invocations (when if the token is not a special form). Using an <code class="language-html highlighter-rouge">if</code> statement to find the corresponding procedure for a given token becomes a linear search for the token comparisons. To speed up this search process, a hash table is created for jumping to the corresponding procedures. Since the memory addresses for the special forms can be determined before parsing the Lisp program, all of the symbols for the special forms have a fixed memory address. Therefore, the hash key can be created by subtracting an offset to the symbol’s memory address, to point to a hashtable that is created near the register locations. This hashtable is provided in <a href="https://github.com/woodrush/lisp-in-life/blob/main/src/memheader.eir">memheader.eir</a>. When the hash key is larger than the regions of this hashtable, it means that the symbol is not a special form, so the evaluation jumps to the lambda/macro invocation procedure.</p>

<h4 id="usage-of-2-bit-headers-to-represent-value-types">Usage of 2-bit headers to represent value types</h4>
<p>The Lisp implementation has 3 distinct value types, <code class="language-html highlighter-rouge">ATOM</code>, <code class="language-html highlighter-rouge">INT</code>, and <code class="language-html highlighter-rouge">LAMBDA</code>. Each value only consumes one QFT byte of memory; the <code class="language-html highlighter-rouge">ATOM</code> value holds the pointer to the symbol’s string hashtable, the <code class="language-html highlighter-rouge">INT</code> value holds the signed integer value, and <code class="language-html highlighter-rouge">LAMBDA</code> holds a pointer to the <code class="language-html highlighter-rouge">Lambda</code> struct, as well as its subtype information, of either <code class="language-html highlighter-rouge">LAMBDA</code>, <code class="language-html highlighter-rouge">MACRO</code>, <code class="language-html highlighter-rouge">TEMPLAMBDA</code> and <code class="language-html highlighter-rouge">TEMPMACRO</code>. (The <code class="language-html highlighter-rouge">TEMPLAMBDA</code> and <code class="language-html highlighter-rouge">TEMPMACRO</code> subtypes are lambda and macro types that recycles its argument value memory space every time it is called, but is unused in the final lisp programs.) Since the RAM’s address space is only 10 bits, there are 6 free bits that can be used for addresses holding pointers. Therefore, the value type and subtype information is held in these free bits. This makes the integer in the Lisp implementation to be a 14-bit signed integer, ranging from -8192 to 8191.</p>

<h4 id="minimization-of-stack-region-usage">Minimization of Stack Region Usage</h4>
<p>Since the C compiler used in this project does not have memory optimization features, this has to be done manually within the C source code. This led to the largest reason why the interpreter’s source code seems to be obfuscated.</p>

<p>One of the largest bottlenecks for memory access was stack region usage. Every time a stack region memory access occurs, the assembly code performs memory address offset operations to access the stack region. This does not happen when accessing the heap memory, since there is only one heap region used in the entire program, so the pointers for global variables can be hard-coded by the assembler. Therefore, it is favorable optimization-wise to use the heap memory as much as possible.</p>

<p>One way to make use of this fact is to use as much global variables as possible. Since registers and common RAM memory share the same memory space, global variables can be accessed with a speed comparable to registers (However, since the physical location of the RAM memory slot within the pattern affects the I/O signal arrival time, and the registers have the most smallest RAM addresses, i.e. they are the closest to the CPU unit, the registers have the fastest memory access time).</p>

<p>Another method of saving memory was to use union memory structures to minimize the stack region usage. In the C compiler used in this project, every time a new variable is introduced in a function, the function’s stack region usage (used per call) is increased to fit all of the variables. This happens even when two variables never appear at the same time. Therefore, using the fact that some variables never appear simultaneously, unions are used for every occurence of such variables, so that they can use a shared region within the stack space. This led to minimization of the stack region usage. Since the stack region is only 233 hextets (1 byte in the QFT RAM is 16 bits) large, this allowed to increase the number of nested function calls, especially the nested calls of <code class="language-html highlighter-rouge">eval</code> which evaluates the S-expressions. Since the S-expressions have a list structure, and <code class="language-html highlighter-rouge">eval</code> becomes nested when lambdas are called in the Lisp program, this optimization was significant for allowing more sophisticated Lisp programs to be run in the architecture.</p>

<h3 id="the-qftasm-layer">The QFTASM layer</h3>
<p>The QFT assembly generated by the C compiler has a lot of room for optimization. I therefore created a compiler optimization tool to reduce the QFTASM assembly size.</p>

<h4 id="constant-folding">Constant folding</h4>
<p>Immediate constant expressions such as <code class="language-html highlighter-rouge">ADD 1 2 destination</code> is folded to a <code class="language-html highlighter-rouge">MOV</code> operation.</p>

<h4 id="mov-folding"><code class="language-html highlighter-rouge">MOV</code> folding</h4>
<p>The QFT assembly code can be splitted into subregions by jump operations, such that:</p>

<ul>
  <li>Each subregion doesn’t contain any jump operations</li>
  <li>Each subregion ends with a jump operation</li>
  <li>Every jump operation in the assembly is guaranteed to jump to the beginning of a subregion, and never to the middle of any subregion</li>
</ul>

<p>The last guarantee where jumps never occur in the middle of a subregion is provided by the C compiler. The ELVM assembly’s program counter is designed so that it increases only when a jump instruction appears. This makes an ELVM program counter to point to a sequence of multiple instructions, instead of a single instruction. Since the ELVM assembly uses the ELVM program counter for its jump instructions, it is guaranteed that the jump instructions in the QFT assembly never jump to the middle of any subregion, and always jumps to a beginning of a subregion.</p>

<p>In each subregion, the dependency graph for the memory address is created. If a memory address becomes written but is later overwritten without becoming used in that subregion at all, the instruction to write to that memory address is removed. Since it is guaranteed that jump operations never jump to the middle of any subregion, it is guaranteed that the overwritten values can be safely removed without affecting the outcome of the program. The <code class="language-html highlighter-rouge">MOV</code> folding optimization makes use of this fact to remove unnecessary instructions.</p>

<p>This folding process is also done with dereferences; if a dereferenced memory address is written, and the address is overwritten without being used at all, and the dereference source is unoverwritten at all during this process, the instruction for writingto the dereferenced memory address is removed.</p>

<h4 id="jump-folding">Jump folding</h4>
<p>If the destination of a conditional or fixed-destination jump instruction points to another jump instruction with a fixed destination, the jump destination is folded to the latter jump instruction’s destination.</p>

<p>A similar folding is done when a fixed jump instruction points to a conditional jump instruction, where the fixed jump instruction is replaced by the latter conditional jump instruction.</p>

<h3 id="the-varlife-layer-the-computer-architecture">The Varlife layer (the computer architecture)</h3>
<h4 id="created-the-with-a-lookup-table-structure-for-the-rom-module">Created the with a lookup table structure for the ROM module</h4>
<p>In <a href="/blog/assets/posts/2022-01-12-lisp-in-life/ss2.png">this image</a> of the CPU and its surrounding modules, the two modules on the top are the ROM modules. The original ROM module had one table, with the memory address as the key and the instruction as the value. I recreated the ROM module to add a lookup table layer, where each distinct instruction (not the opcodes, but the entire instruction including the values used within) holds a distinct serial integer key. The ROM module on the right accepts a program counter address and returns the instruction key for the program counter. The module on the left accepts the instruction key and returns the actual bits of the instruction as the output. This allows for dictionary compression to be performed to the ROM data, saving a lot of space. Since the instructions are 45 bits and the instruction keys are only 10 bits, the instruction key table is 1/4 the size of the original ROM module. Although the ROM size is 3223 for the entire Lisp interpreter, there were only 616 distinct instructions in the Lisp interpreter, making the size of the instruction table be 616 ROM units high, effectively reducing the ROM module size altogether.</p>

<p>The ROM module features another form of compression, where absence of cells are used to represent 0-valued bits within the instruction. Below is a close-up look of the ROM value module:</p>

<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/rom_module.png" alt="The ROM value module" /></p>

<p>Notice that some cells on the left are absent, despite the table being expected to be a rectangular shape. This is because absent cells do not emit any signals, hence effectively emitting 0-valued bits as the output. To use this fact, all of the instructions are first alphabetically ordered at table creation time, so that instructions that start with trailing zeroes become located higher in the table (further from the signal source). This allows for a maximum number of cells to be replaced with absent units to represent 0-valued bits. In fact, the instruction for no-ops is represented as all zeroes, so all of the units in the value module are replaced by absent cells. The no-op instruction appears a lot of times immediately after the jump operation, due to the fact that the QFT architecture has a branch delay when invoking a jump instruction, requiring a no-op instruction to be present to compensate for the delay.</p>

<h4 id="added-new-optimized-instructions-to-the-alu-and-removed-unused-ones">Added new optimized instructions to the ALU, and removed unused ones</h4>
<p>I removed the <code class="language-html highlighter-rouge">AND</code>, <code class="language-html highlighter-rouge">OR</code>, <code class="language-html highlighter-rouge">SL</code> (shift left), <code class="language-html highlighter-rouge">SRL</code> (shift right logical), and the <code class="language-html highlighter-rouge">SRA</code> (shift right arithmetical) opcodes, and added the <code class="language-html highlighter-rouge">SRU</code> (shift right unit) and <code class="language-html highlighter-rouge">SRE</code> (shift right eight) opcodes to the architecture. Since there already were opcodes for <code class="language-html highlighter-rouge">XOR</code> (bitwise-xor) and <code class="language-html highlighter-rouge">ANT</code> (bitwise-and-not), <code class="language-html highlighter-rouge">AND</code> and <code class="language-html highlighter-rouge">OR</code>, which were not used much in the interpreter, could be replaced by these opcodes. The bitshift operations had significantly larger patterns than the other opcodes, being more than 10 times larger than the other opcodes. These were reduced to a fixed-size shift operations which could be implemented in the same sizes as the other opcodes. Since the shift left opcode can be replaced by consecutively adding its own value, effectively multiplying by powers of 2, the opcode was safely removed. The main reason for the original bitshift units being large was due to the shift amounts being dependent on the values of the RAM. Converting a binary value to a physical (in-pattern) shift amount required a large pattern. On the other hand, shifting a fixed value could be implemented by a significantly more simpler pattern. The shift right eight instruction is mainly used for reading out the standard input, where each ASCII character in the input string is packed into one 16-bit RAM memory address.</p>

<p>This resulted in a total of exactly 8 opcodes, <code class="language-html highlighter-rouge">ANT</code>, <code class="language-html highlighter-rouge">XOR</code>, <code class="language-html highlighter-rouge">SRE</code>, <code class="language-html highlighter-rouge">SRU</code>, <code class="language-html highlighter-rouge">SUB</code>, <code class="language-html highlighter-rouge">ADD</code>, <code class="language-html highlighter-rouge">MLZ</code>, and <code class="language-html highlighter-rouge">MNZ</code>. Since this can fit in 3 bits, the opcode region for the instruction value was reduced by 1 bit. Since the RAM module is 10 bits, and the third value of the instruction is always the writing destination of the RAM, and the first instruction can also be made so that it becomes the reading source address of the RAM, this allows for an additional 6*2=12 bits to be reduced from the instruction length. These altogether has reduced the ROM word size from 58 to 45 bits, reducing nearly 1/4 of the original instruction size.</p>

<h4 id="extended-the-rom-and-ram-address-space-from-97-bit-to-1210-bit">Extended the ROM and RAM address space from 9,7-bit to 12,10-bit</h4>
<p>The original QFT architecture had a ROM and RAM address space of 9 and 7 bits. I extended the ROM and RAM address space to 12 and 10 bits, respectively. This was not a straightforward task as it first seemed, since the signal arrival timings between the modules had to be carefully adjusted in order for the signals to line up correctly. This involved reverse-engineering and experimenting undocumented VarLife pattern units used in the original QFT architecture. The same held for when redesigning other parts of the architecture.</p>

<h4 id="reducing-the-standard-input-size">Reducing the Standard Input Size</h4>
<p>Since each byte of the RAM module can be ordered arbitrarily in the CPU’s architecture, the RAM is arranged so that the standard output is written at the very bottom of the RAM module, and proceeds upwards. Therefore, the contents of the RAM can easily be observed in a Game of Life viewer by directly examining the bottom of the RAM module.</p>

<p>Since RAM has 16 bits of memory per memory address, it allows to fit two ASCII-encoded characters per one address. Therefore, the standard input is read out by reading two characters per address. For the standard output, one character is written to one address for aesthetic reasons, so that the characters can be directly observed in a Game of Life viewer the pattern more easily. Also, for the standard output to proceed upwards within the RAM module pattern, the memory pointer for the standard output proceeds backwards in the memory space, while the pointer for the standard input proceeds forwards in the memory space.</p>

<h3 id="the-game-of-life-layer">The Game of Life layer</h3>
<p>Optimizing the Game of Life layer mainly revolved around understanding the <a href="https://www.conwaylife.com/wiki/Macrocell">Macrocell</a> format for representing and saving Game of Life patterns, and the <a href="https://en.wikipedia.org/wiki/Hashlife">Hashlife</a> algorithm. The Macrocell format uses quadtrees and memoization for compressing repeated patterns. Since the final Game of Life pattern is an array of OTCA metapixels which are 2048x2048 large, and even has repeated patterns in the VarLife layer (meaning that there are repeated configurations of OTCA metapixels), this compression reduces the file size for the QFT pattern significantly. The best example that let me understand the Macrocell format was an example provided by Adam P. Goucher in <a href="https://sourceforge.net/p/golly/mailman/golly-test/thread/983116CEB3464154AF26245F052EFB36%40adamspackard/">this thread</a> in Golly’s mailing list.</p>

<p>The Hashlife algorithm also uses quadtrees and memoization to speed up the Game of Life simulations. This algorithm makes use of the fact that the same pattern in a same time frame influences only a fixed extent of its surrounding regions, hence allowing for memoization.</p>

<p>As for optimization, I first noticed that the QFT pattern had a 1-pixel high pattern concatenated to the entire pattern. The original QFT pattern in the original QFT repository was carefully designed so that it is composed of 8x8-sized pattern units. Therefore, most of the patterns can be represented by 8x8 tiles. However, since the 1-pixel high pattern at the top creates an offset that shifts away the pattern from this 8x8 grid, it causes the pattern to have fewer repeated patterns if interpreted from the corner of its bounding box, causing the memoization to work inefficiently. I therefore tried putting a redundant cell (which does not interfere with the rest of the pattern) to realign the entire pattern to its 8x8 grid, which actually slightly reduced the resulting Macrocell file size from the original one. Although I didn’t compare the running times, since the Hashlife algorithm uses memoization over repeated patterns as well, I expect this optimization to at least slightly contribute to the performance of the simulation.</p>

<p>Another optimization was improving the metafier script used to convert VarLife patterns to Game of Life (<a href="https://github.com/woodrush/QFT-devkit/blob/main/MetafierV3.py">MetafierV3.py</a>). The original script used a square region to fit the entire pattern to create the quadtree representation. However, since the Lisp in Life VarLife pattern is 968 pixels wide but 42354 pixels high, it tried to allocate a 65536x65536-sized integer array, which was prohibitively large to run. I modified the script so that it uses a rectangular region, where absent regions of the quadtree are represented as absent cells. Although this is very straightforward with the knowledge of the Macrocell format, it was difficult at first until I became fond of the algorithms surrounding the Game of Life.</p>

<h3 id="memory-region-map-and-the-phases-of-operation">Memory Region Map and the Phases of Operation</h3>
<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/memmap.png" alt="The memory region map of Lisp in Life." /></p>

<p>The memory region map is carefully designed to save space. This is best described with the operation phases of the interpreter.</p>

<h4 id="phase-0-precalculations">Phase 0: Precalculations</h4>
<p>Various precalculations are done after the interpreter starts running. The construction of the string interning hashtable for reserved atoms such as <code class="language-html highlighter-rouge">define</code>, <code class="language-html highlighter-rouge">quote</code>, etc. are done in this phase. For the GCC-compiled interpreter, some variables that are defined in the QFT memory header are defined in the C source.</p>

<p>Since the outcome of these precalculations are always the same for any incoming Lisp program, this phase is done on the host PC, and the results are saved as ramdump.csv during the QFTASM compile time. The results are then pre-loaded into the RAM when the VarLife and Game of Life patterns are created. This allows to saves some CPU cycles when running the interpreter.</p>

<p>As explained earlier, the QFT architecture holds register values in the RAM. There are 11 registers, which are placed in the addresses from 0 to 10.</p>

<p>The reserved values in the image include strings such as reserved atoms and the destinations of the jump hashtable used for evaluation. The rest of the region is used for storing global variables in the interpreter’s C source code.</p>

<h4 id="phase-1-parsing">Phase 1: Parsing</h4>
<p>The Lisp program provided from the standard input is parsed into S-expressions, which is written into the heap region.</p>

<p>Notice that the string interning hashtables are created in the later end of the stack region. This is because these hashtables are only used during the parsing phase, and can be overwritten during the evaluation phase. For most Lisp programs including the ones in this repository, the stack region does not grow far enough to overwrite these values. This allows to place 3 growing memory regions during the parsing phase, the stack region used for nested S-expressions, the heap region which stores the parsed S-expressions, and the string interning hashtables when new strings are detected within the Lisp program. Newly detected strings such as variable names in the Lisp program are also written into the heap region.</p>

<p>The heap region is also designed so that it overwrites the standard input as it parses the program. Since older parts of the program can be discarded once it is parsed, this allows to naturally free the standard input region which save a lot of space after parsing. The standard input also gets overwritten by the Standard output if the output is long enough. However, due to this design, long programs may have trouble at parsing, since the input may be overwritten too far and get deleted before it is parsed. A workaround for this is to use indentation which places the program further ahead into the memory, which will prevent the program from being overwritten from the growing heap region. For all of the programs included in this repository, this is not an issue and the programs become successfully parsed.</p>

<h4 id="phase-2-evaluation">Phase 2: Evaluation</h4>
<p>By this time, all of the contents of the stack region and what is ahead of the head of the heap region can be overwritten in the further steps. Note that a similar issue with the standard input happens with the standard output - when too many Lisp objects are created during runtime, it may overwrite the existing standard output, or may simply exceed the heap region and proceed into the stack region. Since the heap region is connected to the later end of the stack region, this may be safe if the standard output is carefully handled, but the interpreter will eventually start overwriting values of the stack region if the heap continues to grow.</p>

<h3 id="miscellaneous">Miscellaneous</h3>
<h4 id="how-can-a-2-state-otca-metapixel-emulate-the-behavior-of-an-8-state-varlife-pattern">How can a 2-state OTCA Metapixel emulate the behavior of an 8-state VarLife pattern?</h4>
<p>This is one of the most interesting ideas in the original QFT project to make the QFT architecture possible. As explained in <a href="https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673">the original QFT post</a>, the 8 states of VarLife are actually a mixture of 4 different birth/survival rules with binary states. This means that each VarLife cell can only transition between two fixed states, and the birth/survival rule for that cell does not change at any point in time. Moreover, the OTCA Metapixel is designed so that each metapixel can carry its own birth/survival rules. Therefore, each VarLife cell can be enoded into an OTCA Metapixel by specifying its birth/survival rule and the binary state. This means that the array of OTCA Metapixels in the metafied pattern is actually a mixture of metapixels with different birth/survival rules, arranged in a way so that it makes the computation possible.</p>

<h4 id="halting-time">Halting Time</h4>
<p>After the program counter is set to 65535 and the program exits, no more ROM and RAM I/O signals become apparent in the entire module.
This makes the VarLife pattern becomes completely stationary, where every pattern henceforth becomes completely identical.
Defining this as the halting time for the calculation, the pattern for <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a> halts at exactly 105,413,068 VarLife generations.</p>

<p>The halting time for the Game of Life patterns are defined similarly for the meta-states of the OTCA Metapixels.
Since OTCA Metapixels never become stationary, the Game of Life states do not become stationary after the halting time,
but the meta-states of the OTCA Metapixels will become stationary after the halting time.</p>

<p>For the VarLife pattern of <a href="https://github.com/woodrush/lisp-in-life/blob/main/lisp/print.lisp">print.lisp</a>, by generation 105,387,540, the value 65535 gets written to the program counter. At generation 105,413,067, the last signal becomes just one step from disappearing, and at generation 105,413,068 and onwards, the pattern becomes completely stationary and every pattern becomes identical to each other.
In the Game of Life version, since the OTCA Metapixel continues running indefinitely, the pattern does not become completly stationary, but the meta-states of the OTCA Metapixels will become completely stationary, since it is an emulation of the VarLife pattern.
Note that the halting times for programs other than print.lisp is just a sufficient number of generations, and not the exact values.</p>

<p>The required number of generations per CPU cycle depends on many factors such as the ROM and RAM addresses and the types of opcodes, since the arriving times of the I/O signals depend on factors such as these as well. This makes the number of generations required for the program to halt become different between each program.
For example, print.lisp has a rate of 23822.16 generations per CPU cycle (GpC), but z-combinator.lisp has a rate of 28870.81 GpC, and primes-print.lisp has 31502.43 GpC. 23822.16 GpC is in fact insufficient for z-combinator.lisp to finish running, and 28870.81 is also insufficient for primes-print.lisp to finish running.</p>

<h4 id="miscellaneous-screenshots">Miscellaneous Screenshots</h4>
<p><img src="/blog/assets/posts/2022-01-12-lisp-in-life/ss5.png" alt="A close-up view of a part of the ROM module in the Conway's Game of Life version." /></p>

<p>The ALU unit in the CPU. From the left are the modules for the <code class="language-html highlighter-rouge">ANT</code>, <code class="language-html highlighter-rouge">XOR</code>, <code class="language-html highlighter-rouge">SRE</code>, <code class="language-html highlighter-rouge">SRU</code>, <code class="language-html highlighter-rouge">SUB</code>, <code class="language-html highlighter-rouge">ADD</code>, <code class="language-html highlighter-rouge">MLZ</code>, and the <code class="language-html highlighter-rouge">MNZ</code> opcodes.</p>

<p>The <code class="language-html highlighter-rouge">SRE</code> and the <code class="language-html highlighter-rouge">SRU</code> opcodes were newly added for this project.</p>

<h2 id="credits">Credits</h2>
<p>The CPU architecture used in this project was originally created by
the members of the <a href="https://codegolf.stackexchange.com/questions/11880/build-a-working-game-of-tetris-in-conways-game-of-life/142673#142673">Quest For Tetris</a> (QFT) project,
and was later optimized and modified by <a href="https://woodrush.github.io/">Hikaru Ikuta</a> for the Lisp in Life project.
The VarLife cellular automaton rule was also defined by the members of the QFT project.
The metafier for converting VarLife patterns to Conway’s Game of Life patterns was written by the members of the QFT project,
and was later modified by Hikaru Ikuta to support the pattern size of the Lisp in Life architecture.
The assembly language for the QFT architecture, QFTASM, was also originally designed by the members of the QFT project,
and was later modified by Hikaru Ikuta for this project for achieving a feasible running time.
The Lisp interpreter was written by Hikaru Ikuta.
The compilation of the interpreter’s C source code to the ELVM assembly is done using an extended version of <a href="https://github.com/rui314/8cc">8cc</a>
written by Rui Ueyama from Google.
The compilation from the ELVM assembly to QFTASM is done by an extended version of <a href="https://github.com/shinh/elvm">ELVM</a> (the Esoteric Language Virtual Machine),
a project by Shinichiro Hamaji from Preferred Networks, Inc.
The Game of Life backend for ELVM was written by Hikaru Ikuta, and was later further extended by Hikaru for the Lisp in Life project.</p>]]></content><author><name></name></author><category term="Lisp" /><category term="Game_of_Life" /><summary type="html"><![CDATA[Lisp in Life is a Lisp interpreter implemented in Conway's Game of Life.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://woodrush.github.io/blog/assets/posts/2022-01-12-lisp-in-life/lisp-in-life.png" /><media:content medium="image" url="https://woodrush.github.io/blog/assets/posts/2022-01-12-lisp-in-life/lisp-in-life.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Extending SectorLISP to Implement BASIC REPLs and Games</title><link href="https://woodrush.github.io/blog/posts/2022-01-12-sectorlisp-io.html" rel="alternate" type="text/html" title="Extending SectorLISP to Implement BASIC REPLs and Games" /><published>2022-01-12T11:01:35+09:00</published><updated>2022-01-12T11:01:35+09:00</updated><id>https://woodrush.github.io/blog/posts/sectorlisp-io</id><content type="html" xml:base="https://woodrush.github.io/blog/posts/2022-01-12-sectorlisp-io.html"><![CDATA[<p><a href="https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/basic.lisp"><img src="/blog/assets/posts/2022-01-12/ss4.png" alt="A screenshot of a BASIC interpreter written for SectorLISP." /></a></p>

<p><a href="https://justine.lol/sectorlisp2/">SectorLISP</a> is an amazing project
where a fully functional Lisp interpreter is fit into the 512 bytes of the boot sector of a floppy disk.
Since it works as a boot sector program, the binary can be written to a disk to be used as a boot drive,
where the computer presents an interface for writing and evaluating Lisp programs,
all running in the booting phase of bare metal on the 436-byte program.
As it hosts the Turing-Complete language of Lisp,
I was in fact able to write a <a href="https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/basic.lisp">BASIC interpreter</a>
in 120 lines of SectorLISP code, which evaluates BASIC programs embedded as an expression within the Lisp code,
shown in the screenshot above.</p>

<p>When I first saw SectorLISP and got it to actually run on my machine,
I was struck with awe by how such a minimal amount of machine code could be used to open up the vast ability to
host an entire programming language.
You can write clearly readable programs which the interpreter will accurately evaluate to the correct result.
I find it beautiful how such a small program is capable of interpreting a form of human thought
and generating a sensible response that contains the meaning encapsulated in the inquired statement.</p>

<h2 id="the-issue---designing-interactions">The Issue - Designing Interactions</h2>
<p>After writing various programs for SectorLISP, there was a particular thought that came into my mind.
Even after writing the BASIC interpreter, I felt that there was one very important feature that could significantly enhance the capabilities of SectorLISP -
that is, the ability to <em>accept feedback</em> from the user depending on the program’s output,
by <em>designing the interaction</em> between the user and the computer.</p>

<p>The prime example of this is games.
Games are possible to be played on a computer since the player can react <em>depending on</em> the output of the computer.
Of course, even with pure functions as in SectorLISP,
it’s still possible to create a game if we make the user of the program run the same program again
every time the program demands a new input.
The entire history of user inputs can be expressed as a certain list in the program,
and the input and output states can be passed through the course of the entire program,
and the program can stop whenever a required input is not apparent, also showing its accumulated outputs.
However, such an interface that requires repeated inputs is rather inconvenient for the user,
inconvenient in the same sense that <code class="language-html highlighter-rouge">IF</code> is inconvenient than <code class="language-html highlighter-rouge">COND</code>,
and how lambdas that can take only one argument are inconvenient than lambdas that can take any number of arguments,
both being used to make the experience of the humans interacting with SectorLISP as simple and natural as possible.</p>

<p>When you think about it, the reason why computers are such a powerful device
used almost everywhere in our lives today,
is because they can be <em>redesigned</em> into an entirely different tool for an arbitrary purpose.
The computer is then no longer a tool that is used only by the programmer,
but can be used by <em>anybody</em> to run its applications.
The transition from ENIAC to the dawn of the personal computing era
was possible since computers became capable of general tasks other than computing equations,
such as writing and saving documents for a business.
Today, computers are being used for creating artwork,
for playing games, for communicating with others, to only give a few examples.
The entire history of computers is shaped by what new tasks computers became capable of,
which is inseparable from the means of interaction between the human and the computer.</p>

<p>At the heart of the diverse applications for computers is the language used to program them.
This is why programming languages capable of designing interactions are special -
once a computer is programmed, it can leave the hands of the programmer
and lie in the hands of the user, who interacts with it in a newly designed way.</p>

<p>As a matter of fact, all of the other languages mentioned in the <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a> support an I/O functionality.
<a href="https://github.com/cesarblum/sectorforth">SectorFORTH</a> has the <code class="language-html highlighter-rouge">key</code> and <code class="language-html highlighter-rouge">emit</code> instructions which reads a keystroke from the user and prints a character to the console.
<a href="https://github.com/nanochess/bootBASIC">BootBasic</a> has the instructions <code class="language-html highlighter-rouge">input</code> and <code class="language-html highlighter-rouge">print</code> where <code class="language-html highlighter-rouge">input</code> stores a user input to a variable.
Even BF has the instructions <code class="language-html highlighter-rouge">,</code> and <code class="language-html highlighter-rouge">.</code> capable of designing arbitrary user text input and output.
<a href="https://github.com/rdebath">@rdebath</a> has in fact made a <a href="https://github.com/rdebath/LostKingdom">text adventure game written entirely in BF</a>.</p>

<p>Although the goal of SectorLISP is set in the realm of pure functions,
I thought that it would be a massive gain if it were able to handle I/O and still have a smaller program size
than the other languages mentioned in the SectorLISP blog post.
In the context of comparing the binary footprint of programs,
it would be a better comparison if all of the programs under discussion had even more functionalities in common.
All of this could be achieved if we could construct a version of SectorLISP that is capable of handling user input and outputs
that still has a small program size.</p>

<h2 id="the-solution">The Solution</h2>
<p>What could we do to empower SectorLISP with the puzzle piece of interaction?
What is a natural way of implementing I/O?
To answer this, I created a fork of SectorLISP that supports two new special forms,
<code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code>. These two special forms are the counterparts for the <code class="language-html highlighter-rouge">,</code> and <code class="language-html highlighter-rouge">.</code> instructions in BF.
<code class="language-html highlighter-rouge">READ</code> accepts an arbitrary S-Expression from the user, and <code class="language-html highlighter-rouge">PRINT</code> prints the value of the evaluated argument to the console.
<code class="language-html highlighter-rouge">PRINT</code> also prints a newline when called with no arguments as <code class="language-html highlighter-rouge">(PRINT)</code>.</p>

<p>The fork is available here: <a href="https://github.com/woodrush/sectorlisp/tree/io">https://github.com/woodrush/sectorlisp/tree/io</a></p>

<p>Adding all of these features only amounted to an extra 35 bytes of the binary,
with a total of 469 bytes, or 471 bytes including the boot signature.
This is still 22 bytes or more smaller than the two former champions of minimal languages that fit in a boot sector mentioned in the <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a>,
which are <a href="https://github.com/cesarblum/sectorforth">SectorFORTH</a> (491 bytes) and <a href="https://github.com/nanochess/bootBASIC">BootBasic</a> (510 bytes).
The rather minimal increase was achievable since most of the code for handling input and output were already available from the REPL’s functionality.
This fork successfully shows that adding an I/O feature to SectorLISP
will still allow it to have a smaller binary footprint than the two former champions.</p>

<p><strong>Update:</strong> Thanks to a <a href="https://github.com/woodrush/sectorlisp/pull/2">pull request</a> by <a href="https://github.com/jart">@jart</a>,
the author of the original SectorLISP, we’re down to 465 bytes or 467 bytes including the boot signature.
Thank you @jart for your contribution!
The details of the assembly optimizations including the one used in this pull request are discussed in the
<a href="#assembly-optimizations">Assembly Optimizations</a> section.</p>

<h2 id="usage">Usage</h2>
<p>To run the SectorLISP fork, first <code class="language-html highlighter-rouge">git clone</code> and <code class="language-html highlighter-rouge">make</code> SectorLISP’s binary, <code class="language-html highlighter-rouge">sectorlisp.bin</code>:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>git clone https://github.com/woodrush/sectorlisp
<span class="nb">cd </span>sectorlisp
git checkout io
make
</code></pre></div></div>

<p>This will generate <code class="language-html highlighter-rouge">sectorlisp.bin</code> under <code class="language-html highlighter-rouge">./sectorlisp</code>.</p>

<p>To run SectorLISP on the i8086 emulator <a href="https://justine.lol/blinkenlights/">Blinkenlights</a>,
first follow the instructions on its <a href="https://justine.lol/blinkenlights/download.html">download page</a>
and get the latest version:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>curl https://justine.lol/blinkenlights/blinkenlights-latest.com <span class="o">&gt;</span>blinkenlights.com
<span class="nb">chmod</span> +x blinkenlights.com
</code></pre></div></div>

<p>You can then run SectorLISP by running:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>./blinkenlights.com <span class="nt">-rt</span> sectorlisp.bin
</code></pre></div></div>

<p>In some cases in Ubuntu, there might be a graphics-related error showing and the emulator may not start.
In that case, run the following command first available on the download page:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nb">sudo </span>sh <span class="nt">-c</span> <span class="s2">"echo ':APE:M::MZqFpD::/bin/sh:' &gt;/proc/sys/fs/binfmt_misc/register"</span>
</code></pre></div></div>

<p>Running this command should allow you to run Blinkenlights on your terminal.
Instructions for running Blinkenlights on other operating systems is described in the <a href="https://justine.lol/blinkenlights/download.html">Blinkenlights download page</a>.</p>

<p>After starting Blinkenlights,
expand the size of your terminal large enough so that the <code class="language-html highlighter-rouge">TELETYPEWRITER</code> region shows up
at the center of the screen.
This region is the console used for input and output.
Then, press <code class="language-html highlighter-rouge">c</code> to run the emulator in continuous mode.
The cursor in the <code class="language-html highlighter-rouge">TELETYPEWRITER</code> region should move one line down.
You can then start typing in text or paste a long code from your terminal into Blinkenlight’s console
to run your Lisp program.</p>

<h3 id="running-on-physical-hardware">Running on Physical Hardware</h3>
<p>You can also run SectorLISP on an actual physical machine if you have a PC with an Intel CPU that boots with a BIOS,
and a drive such as a USB drive or a floppy disk that can be used as a boot drive.
First, mount your drive to the PC you’ve built sectorlisp.bin on, and check:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code>lsblk <span class="nt">-o</span> KNAME,TYPE,SIZE,MODEL
</code></pre></div></div>

<p>Among the list of the hardware, check for the device name for your drive you want to write SectorLISP onto.
After making sure of the device name, run the following command, replacing <code class="language-html highlighter-rouge">[devicename]</code> with your device name.
<code class="language-html highlighter-rouge">[devicename]</code> should be values such as <code class="language-html highlighter-rouge">sda</code> or <code class="language-html highlighter-rouge">sdb</code>, depending on your setup.</p>

<p><strong>Caution:</strong> The following command used for writing to the drive
will overwrite anything that exists in the target drive’s boot sector,
so it’s important to make sure which drive you’re writing into.
If the command or the device name is wrong,
it may overwrite the entire content of your drive or other drives mounted in your PC,
probably causing your computer to be unbootable.
Please perform these steps with extra care, and at your own risk.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nb">sudo dd </span><span class="k">if</span><span class="o">=</span>sectorlisp.bin <span class="nv">of</span><span class="o">=</span>/dev/[devicename] <span class="nv">bs</span><span class="o">=</span>512 <span class="nv">count</span><span class="o">=</span>1
</code></pre></div></div>

<p>After you have written your boot drive, insert the drive to the PC you want to boot it from.
You may have to change the boot priority settings from the BIOS to make sure the PC boots from the target drive.
When the drive boots successfully, you should see a cursor blinking in a blank screen,
which indicates that you’re ready to type your Lisp code into bare metal.</p>

<!-- Here is a picture of it running on my machine:

[![A screenshot of SectorLISP running on a physical machine.](/blog/assets/posts/2022-01-12/ss5.jpg)](/blog/assets/posts/2022-01-12/ss5.jpg) -->

<h2 id="applications">Applications</h2>
<p>Here we present examples to showcase the capabilities of <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code>.</p>

<h3 id="games">Games</h3>
<p>A major example of interactive programs is games.
I created a simple number guessing game that works on the fork of SectorLISP.</p>

<p>Here is a screenshot of the game in action, run in <a href="https://justine.lol/blinkenlights/">Blinkenlights</a>:</p>

<p><a href="/blog/assets/posts/2022-01-12/ss2.png"><img src="/blog/assets/posts/2022-01-12/ss2.png" alt="A screenshot of SectorLISP running a number guessing game" /></a></p>

<p>Here is the text shown in the console:</p>

<pre style="font-size:0.9em">
(LET ' S PLAY A NUMBER GUESSING GAME. I ' M THINKING OF A CERTAIN NUMBER BETWEEN
 1 AND 10. SAY A NUMBER, AND I ' LL TELL YOU IF IT ' S LESS THAN, GREATER THAN,
OR EQUAL TO MY NUMBER. CAN YOU GUESS WHICH NUMBER I ' M THINKING OF?)
(PLEASE INPUT YOUR NUMBER IN UNARY. FOR EXAMPLE, 1 IS (*) , 3 IS (* * *) , ETC.)
NUMBER&gt;(* * *)
(YOUR GUESS IS LESS THAN MY NUMBER.)
NUMBER&gt;*
(PLEASE INPUT YOUR NUMBER IN UNARY. FOR EXAMPLE, 1 IS (*) , 3 IS (* * *) , ETC.)
NUMBER&gt;(* * * * * * * *)
(YOUR GUESS IS GREATER THAN MY NUMBER.)
NUMBER&gt;
</pre>

<p>We can see that the game is able to produce interactive outputs based on the feedback from the user,
which is an essential feature for creating games.
Note that there is also robust input handling in action,
where in the second input <code class="language-html highlighter-rouge">NUMBER&gt;*</code>, the user writes an invalid input <code class="language-html highlighter-rouge">*</code>, which is not a list.
The game can handle such inputs without crashing.</p>

<p>The code is available at <a href="https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/number-guessing-game.lisp">https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/number-guessing-game.lisp</a>.</p>

<h3 id="extended-lisp-repl---transforming-the-language-itself">Extended Lisp REPL - Transforming the Language Itself</h3>
<p>The I/O feature can be used to transform the SectorLISP language itself as well.
As an example, I made an extended Lisp REPL where <code class="language-html highlighter-rouge">macro</code>, <code class="language-html highlighter-rouge">define</code>, <code class="language-html highlighter-rouge">progn</code>,
as well as <code class="language-html highlighter-rouge">print</code> and <code class="language-html highlighter-rouge">read</code> are all implemented as new special forms.</p>

<p>Here is an example session of the program:</p>

<pre><code class="language-txt">REPL&gt;(define defmacro (quote (macro (name vars body)
       (` (define (~ name) (quote (macro (~ vars) (~ body))))))))
=&gt;(macro (name vars body) (` (define (~ name) (quote (macro (~ vars) (~ body))))
))

REPL&gt;(defmacro repquote (x)
       (` (quote ((~ x) (~ x)))))
=&gt;(macro (x) (` (quote ((~ x) (~ x)))))

REPL&gt;(repquote (1 2 3))
=&gt;((1 2 3) (1 2 3))

REPL&gt;
</code></pre>

<p>The code is available at <a href="https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/repl-macro-define.lisp">https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/repl-macro-define.lisp</a>.</p>

<p>In the example above, the user first uses the backquote macro <code class="language-html highlighter-rouge">`</code> to define <code class="language-html highlighter-rouge">defmacro</code> as a new macro,
then uses <code class="language-html highlighter-rouge">defmacro</code> to define a new macro <code class="language-html highlighter-rouge">repquote</code>.
These newly added features allow an interaction that is much more closer to those in modern Lisp dialects.</p>

<p>In the <a href="https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/repl-macro-define.lisp">code</a>,
these additional user inputs are included at the end of the code which could be directly pasted in the console.
However, we could look at this in another way - by writing the REPL code as the header,
we have effectively transformed the <em>syntax of the language itself</em>, by introducing new special forms
which were not present in the original interface.
The <code class="language-html highlighter-rouge">DEFINE</code> special form is also introduced in SectorLISP’s <a href="https://github.com/jart/sectorlisp/tree/friendly">friendly branch</a>,
which adds some extra bytes.
With <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code>, we can instead build these new features on top of the interface as software,
allowing us to save a lot of the program size.</p>

<h3 id="interactive-basic-repl">Interactive BASIC REPL</h3>
<p>As a final example for drastically modifying the means of user interactions,
I made an interactive BASIC interpreter written in the I/O SectorLISP.
It runs a subset of BASIC with the instructions <code class="language-html highlighter-rouge">LET</code>, <code class="language-html highlighter-rouge">IF</code>, <code class="language-html highlighter-rouge">GOTO</code>, <code class="language-html highlighter-rouge">PRINT</code>, <code class="language-html highlighter-rouge">REM</code>, and the infix operators <code class="language-html highlighter-rouge">+</code>, <code class="language-html highlighter-rouge">-</code>, <code class="language-html highlighter-rouge">%</code>, and <code class="language-html highlighter-rouge"><span class="nt">&lt;</span><span class="err">=</span></code>.
Integers are expressed in unary as a list of atoms, such as <code class="language-html highlighter-rouge">(1 1 1)</code>.</p>

<p>Here is a screenshot of the final results, run in <a href="https://justine.lol/blinkenlights/">Blinkenlights</a>:</p>

<p><a href="/blog/assets/posts/2022-01-12/ss3.png"><img src="/blog/assets/posts/2022-01-12/ss3.png" alt="A screenshot of SectorLISP running a BASIC interpreter." /></a></p>

<p><a href="https://github.com/jart">@jart</a> has created a video of it running on Blinkenlights (Thank you @jart!):</p>

<video width="100%" poster="/blog/assets/posts/2022-01-12/ss-basic.png" controls="" preload="none">
  <source src="//storage.googleapis.com/justine/sectorlisp2/woodrush2.mp4" type="video/mp4" />
</video>

<p>The code is available at <a href="https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/basic-repl.lisp">https://github.com/woodrush/sectorlisp-examples/blob/main/lisp/basic-repl.lisp</a>.</p>

<p>In this example, SectorLISP no longer presents an interface for evaluating Lisp expressions,
but provides a new interface for recording and evaluating BASIC programs,
transforming SectorLISP into an entirely different application.
This highlights how programming languages can be used to redesign computers into tools for arbitrary purposes -
using this SectorLISP program, users can now interact with the computer in a new way using the BASIC language.</p>

<p>Although it is indeed possible to run this evaluator as a static program as in the code shown at the beginning,
the new program is able to hide and encapsulate the details of the underlying Lisp program by presenting a new interface.
For the static version, the evaluator must also be entirely retyped again to evaluate a new BASIC program, which is a major difference in terms of interaction.
This shows how features as simple as <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code> can be used to create a powerful application with the language.
In a way, we can think that SectorLISP now works as a minimal operating system,
and the programs within it such as this REPL works as an application that extends the capabilities of the underlying OS.</p>

<h2 id="implementation-details">Implementation Details</h2>
<p>Let’s look at some details for dealing with I/O.</p>

<h3 id="sequential-execution---defining-progn-using-pre-existing-features">Sequential Execution - Defining <code class="header">PROGN</code> using Pre-existing Features</h3>
<p>First of all, side effects are inseparable from the notion of sequential execution.
Although lambda bodies in SectorLISP can only have one expression, there is in fact an
already built-in way to naturally manage sequential execution - you can pass expressions as the <em>arguments</em> of lambdas
to make them executed sequentially!</p>

<p>For example, the following program allows the execution of three consecutive <code class="language-html highlighter-rouge">PRINT</code>s:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">((</span><span class="k">LAMBDA</span> <span class="p">()</span> <span class="nc">NIL</span><span class="p">)</span>
 <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">A</span><span class="p">))</span>
 <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">B</span><span class="p">))</span>
 <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">C</span><span class="p">)))</span>
</code></pre></div></div>

<p>Here, each <code class="language-html highlighter-rouge">PRINT</code> statement is taken as the arguments of an empty lambda expression <code class="language-html highlighter-rouge">(LAMBDA () NIL)</code>,
which are all executed in the order of appearance.
This is possible since <code class="language-html highlighter-rouge">EVLIS</code> evaluates all of the arguments <em>before</em> calling <code class="language-html highlighter-rouge">PAIRLIS</code> to bind the values to the variables,
so all of the expressions get evaluated in order regardless to the number of arguments that the lambda expects.</p>

<p>Since this empty lambda can be used anywhere with an arbitrary number of expressions,
you can name it <code class="language-html highlighter-rouge">PROGN</code> and use it as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">PROGN</span><span class="p">)</span>
   <span class="p">(</span><span class="nv">PROGN</span> <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">A</span><span class="p">))</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">B</span><span class="p">))</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">C</span><span class="p">))))</span>
 <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">()</span> <span class="nc">NIL</span><span class="p">)))</span>
</code></pre></div></div>

<p>Note that <code class="language-html highlighter-rouge">PROGN</code> always returns <code class="language-html highlighter-rouge">NIL</code> instead of the last expression inside the sequence,
which is different from the behavior in most Lisp dialects.
To extract the values from a PROGN sequence, you can create repeated lambda arguments as follows:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">PROGN</span><span class="p">)</span>
   <span class="p">(</span><span class="nv">PROGN</span> <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">A</span><span class="p">))</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">B</span><span class="p">))</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">C</span><span class="p">))</span>
          <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">D</span><span class="p">)))</span>
 <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span> <span class="nv">X</span> <span class="nv">X</span> <span class="nv">X</span><span class="p">)</span> <span class="nv">X</span><span class="p">)))</span>
 <span class="c1">;; Returns (QUOTE D)</span>
</code></pre></div></div>

<p>Note that the return value of <code class="language-html highlighter-rouge">PRINT</code> is designed to be undefined to save the program space.
This does not become a problem as will be discussed later.</p>

<p>You can use <code class="language-html highlighter-rouge">CONS</code> instead of <code class="language-html highlighter-rouge">PROGN</code> as well for the same purpose:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">CDR</span> <span class="p">(</span><span class="k">CDR</span> <span class="p">(</span><span class="k">CDR</span>
  <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">PRINT</span> <span class="nv">A</span><span class="p">)</span>
  <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">PRINT</span> <span class="nv">B</span><span class="p">)</span>
  <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">PRINT</span> <span class="nv">C</span><span class="p">)</span>
        <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">D</span><span class="p">)))))))</span>
</code></pre></div></div>

<p>These tools are enough to deal with sequential execution and the extraction of the executed expressions.</p>

<p>When I first came up with the <code class="language-html highlighter-rouge">PROGN</code> solution, I thought it was as if SectorLISP had been awaiting for sequential execution to be used.
Although pure expressions as in the original SectorLISP implementation do not require this feature,
it was a nice realization that this feature had already been built in so naturally in SectorLISP.
It is also pleasing that the syntax it provides is the same as modern Lisp dialects,
only with the difference that it always returns <code class="language-html highlighter-rouge">NIL</code> instead of the final value,
which still can be worked around using the methods discussed earlier.</p>

<h3 id="comments-inside-progn">Comments inside <code class="header">PROGN</code></h3>
<p>Since all of the values inside <code class="language-html highlighter-rouge">PROGN</code> are discarded after its execution,
you can write comments inside a <code class="language-html highlighter-rouge">PROGN</code> block, with the expense of some RAM space in the string interning region and some extra evaluations:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span>
           <span class="nv">PROGN</span> <span class="c1">;;</span>
         <span class="p">)</span>
   <span class="p">(</span><span class="nv">PROGN</span> <span class="c1">;; (QUOTE - THIS PRINTS 3 CONSECTUTIVE LETTERS.)</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">A</span><span class="p">))</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">B</span><span class="p">))</span>
          <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">C</span><span class="p">))))</span>
 <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">()</span> <span class="nc">NIL</span><span class="p">))</span>
 <span class="nc">NIL</span><span class="p">)</span>
</code></pre></div></div>

<p>Here, the variable <code class="language-html highlighter-rouge">;;</code> is bound to <code class="language-html highlighter-rouge">NIL</code> and is placed inside <code class="language-html highlighter-rouge">PROGN</code>.
Since <code class="language-html highlighter-rouge">;;</code> immediately evaluates to <code class="language-html highlighter-rouge">NIL</code> and is discarded, this does nothing to the relevant states of the interpreter and the program.
Because <code class="language-html highlighter-rouge">;;</code> actually does not comment out its following statement in SectorLISP,
the comment body that follows after is enclosed inside a <code class="language-html highlighter-rouge">QUOTE</code> form to prevent from it being executed,
which allows for its result to also be discarded after execution.</p>

<p>Also, note that the parentheses for the outer lambda have some extra newlines to prevent text editors from commenting out the parentheses <code class="language-html highlighter-rouge">)</code>.
This format is used in the number guessing program as well.</p>

<h3 id="loops-using-recursion">Loops using Recursion</h3>
<p>Although this is not a newly added feature, it is worth noting that loops can be implemented as recursion, by calling a function within itself.
In the number guessing game example, the functions <code class="language-html highlighter-rouge">MAIN</code> and <code class="language-html highlighter-rouge">GAMELOOP</code> are called within themselves to be executed an arbitrary number of times.
This combined with <code class="language-html highlighter-rouge">PROGN</code> provides a natural way for writing sequential programs.</p>

<h3 id="print-debugging">Print Debugging</h3>
<p>The <code class="language-html highlighter-rouge">PRINT</code> feature is not only convenient for the user of the program, but in fact provides a helpful interface for the programmer as well.
That is, it allows for print debugging, to check the values occurring at runtime.
Even with Lisp having a comfortable syntax, even the most experienced programmer would have a difficult time debugging a large program
if the internal states and variables could not be observed at runtime.</p>

<p>This can be done by simply wrapping the expression with a predefined <code class="language-html highlighter-rouge">DEBUG</code> function:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">((</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">DEBUG</span><span class="p">)</span>
   <span class="nv">...</span>
   <span class="p">(</span><span class="nv">DEBUG</span> <span class="nv">EXPR</span><span class="p">)</span>
   <span class="nv">...</span>
 <span class="p">)</span>
 <span class="p">(</span><span class="k">QUOTE</span> <span class="p">(</span><span class="k">LAMBDA</span> <span class="p">(</span><span class="nv">X</span><span class="p">)</span> <span class="p">(</span><span class="k">CDR</span> <span class="p">(</span><span class="k">CONS</span> <span class="p">(</span><span class="k">PRINT</span> <span class="nv">X</span><span class="p">)</span> <span class="nv">X</span><span class="p">)))))</span>
</code></pre></div></div>

<p>The need for the extra wrapper function <code class="language-html highlighter-rouge">DEBUG</code> occurs since the return value of <code class="language-html highlighter-rouge">PRINT</code>
is designed to be undefined to save the program size.</p>

<p>The art of writing a program always comes with the act of deleting and revising a program,
by observing its behavior and the internal states.
The print debugging feature is a simple yet powerful interface that is a de facto requirement if one wishes to write large programs.
Such an interface is comparable to the reason why <code class="language-html highlighter-rouge">COND</code> is implemented in SectorLISP instead of <code class="language-html highlighter-rouge">IF</code> which usually induces a more obfuscated program structure.
I myself heavily used this print debugging feature to write the BASIC interpreter,
as well as the version that runs in the original SectorLISP which I wrote and debugged in the I/O SectorLISP fork.</p>

<h3 id="return-values-of-print">Return Values of <code class="header">PRINT</code></h3>
<p>As it was mentioned earlier, <code class="language-html highlighter-rouge">PRINT</code> is designed to return an undefined value to save the program size.
Since values passed to <code class="language-html highlighter-rouge">PRINT</code> can be extracted using <code class="language-html highlighter-rouge">DEBUG</code>, and <code class="language-html highlighter-rouge">PRINT</code> can be used in <code class="language-html highlighter-rouge">PROGN</code> where values are discarded,
having <code class="language-html highlighter-rouge">PRINT</code> to return undefined values was not a problem for at least in all of the examples discussed before.
Running a bare <code class="language-html highlighter-rouge">PRINT</code> expression in the REPL also didn’t print any unwanted strings in the console,
so I consider that this property can be safely managed in most use cases.
Running various <code class="language-html highlighter-rouge">PRINT</code> expressions in the REPL turns out like this:</p>

<div class="language-sectorlisp highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">A</span><span class="p">))</span>
<span class="nv">A</span>
<span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">QUOTE</span> <span class="nv">A</span><span class="p">)))</span>
<span class="nv">ANIL</span>
<span class="p">(</span><span class="k">PRINT</span> <span class="p">(</span><span class="k">READ</span><span class="p">))</span><span class="nv">AAA</span>
<span class="nv">AAA</span>
</code></pre></div></div>

<p>Notice that the results are slightly odd in the first expression,
since the REPL is supposed to show the return value of <code class="language-html highlighter-rouge">PRINT</code> as well as its effect of printing <code class="language-html highlighter-rouge">A</code> in the console,
but nothing is printed.
In the second expression, a nested <code class="language-html highlighter-rouge">PRINT</code> expression turns out to return <code class="language-html highlighter-rouge">NIL</code>, which is printed after <code class="language-html highlighter-rouge">A</code> as a return value by the REPL.
This phenomenon should not occur in well-written large programs,
if the program is written so that the return values of <code class="language-html highlighter-rouge">PRINT</code> is not referenced by anything,
which should be a natural result if they are all executed inside <code class="language-html highlighter-rouge">PROGN</code>.</p>

<p><code class="language-html highlighter-rouge">READ</code> is much safer since it is by definition designed to have a valid return value regardless of its context.
At first, there was a bug where the first character was ignored by <code class="language-html highlighter-rouge">READ</code>, but it was fixed by caching the lookahead character from the user input
inside <code class="language-html highlighter-rouge">GetChar</code>, as fixed in <a href="https://github.com/woodrush/sectorlisp/commit/162969de4279708cafbc46095773926248c553a0"><code class="language-html highlighter-rouge">162969d</code></a>
(the latest version uses the <code class="language-html highlighter-rouge">%bp</code> register instead of <code class="language-html highlighter-rouge">%fs</code>, as fixed in <a href="https://github.com/woodrush/sectorlisp/commit/1af3db75fe49c964d27b5a86e65db9d7b4353ba9"><code class="language-html highlighter-rouge">1af3db7</code></a>).</p>

<h2 id="assembly-optimizations">Assembly Optimizations</h2>
<p>Here we’ll cover the details of optimizing the assembly size.
More details for the methods used in the original SectorLISP assembly code are available at
the original SectorLISP blog post, <a href="https://justine.lol/sectorlisp2/">https://justine.lol/sectorlisp2/</a>.</p>

<h3 id="smaller-jump-instruction-encodings">Smaller Jump Instruction Encodings</h3>
<p>This is a method used in the <a href="https://github.com/woodrush/sectorlisp/pull/2">pull request</a> by <a href="https://github.com/jart">@jart</a>,
the author of the original SectorLISP.
Conditional jumps in x86 are encoded in different instruction sizes depending on the size of the jump’s displacement.
When the displacement fits in one byte, i.e. it is between -128 and 127,
the instruction fits in two bytes, instead of four bytes when the displacement is larger than that size.
The pull request by @jart uses this feature by first reordering the functions within the assembly code,
allowing to shrink the displacements for the conditional jump instructions related to <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code>.</p>

<h3 id="reducing-return-instructions-using-the-control-flow-structure">Reducing Return Instructions using the Control Flow Structure</h3>
<p>This is a method used in the original SectorLISP implementation, which is used in the fork as well.
Consider the following example where a function <code class="language-html highlighter-rouge">A</code> calls another function <code class="language-html highlighter-rouge">B</code> and then immediately returns afterward:</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nl">A:</span>      <span class="nf">mov</span> <span class="o">%</span><span class="nb">ax</span><span class="p">,</span><span class="o">%</span><span class="nb">si</span>
        <span class="nf">call</span> <span class="nv">B</span>
        <span class="nf">ret</span>

<span class="nl">B:</span>      <span class="nf">mov</span> <span class="o">%</span><span class="nb">si</span><span class="p">,</span><span class="o">%</span><span class="nb">bp</span>
        <span class="nf">ret</span>
</code></pre></div></div>

<p>the code can then be reduced by two instructions without changing the behavior, by concatenating <code class="language-html highlighter-rouge">A</code> before <code class="language-html highlighter-rouge">B</code> as the following:</p>

<div class="language-nasm highlighter-rouge"><div class="highlight"><pre class="syntax"><code><span class="nl">A:</span>      <span class="nf">mov</span> <span class="o">%</span><span class="nb">ax</span><span class="p">,</span><span class="o">%</span><span class="nb">si</span>
<span class="c1">;       slide</span>
<span class="nl">B:</span>      <span class="nf">mov</span> <span class="o">%</span><span class="nb">si</span><span class="p">,</span><span class="o">%</span><span class="nb">bp</span>
        <span class="nf">ret</span>
</code></pre></div></div>

<p>This way, even if there is no <code class="language-html highlighter-rouge">ret</code> instruction in the <code class="language-html highlighter-rouge">A</code> block,
the control flow can immediately move inside <code class="language-html highlighter-rouge">B</code> where it has a <code class="language-html highlighter-rouge">ret</code> instruction.
The same <code class="language-html highlighter-rouge">ret</code> instruction is therefore shared by two functions <code class="language-html highlighter-rouge">A</code> and <code class="language-html highlighter-rouge">B</code>.
This allows function calls such as <code class="language-html highlighter-rouge">A</code> and <code class="language-html highlighter-rouge">B</code> to both behave the same as in the previous code with a fewer amount of instructions.</p>

<p>This method is used to implement <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code> as an extension of <code class="language-html highlighter-rouge">.PutObject</code> and <code class="language-html highlighter-rouge">GetToken</code>
where some additional instructions are run before the original functions.
This way of reusing existing code allowed the increase of the program size to be a rather small size.</p>

<h2 id="conclusion">Conclusion</h2>
<p>I made a fork of SectorLISP that supports two new special forms <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code>, which provides a natural I/O interface useful for both the programmer and the user of the program.
This allowed for the following findings:</p>

<ul>
  <li>The fork allows for writing interactive programs for SectorLISP, such as games and REPLs
of other programming languages such as a subset of BASIC.</li>
  <li>With the new special forms <code class="language-html highlighter-rouge">READ</code> and <code class="language-html highlighter-rouge">PRINT</code>, you can now design the interactions between the user and the computer,
which is a feature supported in all of the other languages mentioned in the original <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a>,
including SectorFORTH, BootBasic, and also BF.</li>
  <li>Adding all of these features only amounted to an extra 35 bytes of the binary, with a total of 469 bytes,
or 471 bytes including the boot signature.
When speaking of the binary footprint of a program, it is important for each program to share as many common features as possible.
The fork of SectorLISP achieves this by supporting the I/O feature, and also accomplishes in showing that the program size
can still be limited to an amount less by 22 bytes or more compared with the other programming languages mentioned in the SectorLISP blog post.
    <ul>
      <li><strong>Update:</strong> As mentioned earlier, a pull request from <a href="https://github.com/jart">@jart</a> has allowed us to
bring down the total program size to 465 bytes or 467 bytes including the boot signature.
Thank you @jart for your contribution!</li>
    </ul>
  </li>
</ul>

<h2 id="credits">Credits</h2>
<p>The video for the <a href="#interactive-basic-repl">interactive BASIC REPL</a> was created by <a href="https://justine.lol/">Justine Tunney</a>.
The new <a href="https://github.com/woodrush/sectorlisp/tree/io">I/O fork of SectorLISP</a> discussed in this post was first created by <a href="https://woodrush.github.io/">Hikaru Ikuta</a>,
and have received <a href="https://github.com/woodrush/sectorlisp/pull/2">contributions</a> from Justine Tunney.
The SectorLISP project was first started by Justine Tunney and was created by the authors who have contributed to <a href="https://github.com/jart/sectorlisp">the project</a>,
and the authors credited in the original <a href="https://justine.lol/sectorlisp2/">SectorLISP blog post</a>.
I’d also like to thank Justine and <a href="https://cs.rit.edu/~hm2186/">Hannah Miller</a> from the Rochester Institute of Technology for the fruitful discussion on improving this blog post.</p>]]></content><author><name></name></author><category term="Lisp" /><category term="x86" /><category term="SectorLISP" /><summary type="html"><![CDATA[Supporting interactive programs in SectorLISP, a 512-byte Lisp interpreter written by the authors of the SectorLISP project.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://woodrush.github.io/blog/assets/posts/2022-01-12/ss4.png" /><media:content medium="image" url="https://woodrush.github.io/blog/assets/posts/2022-01-12/ss4.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>